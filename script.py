import os
import json
import random
from datetime import time as dtime
from zoneinfo import ZoneInfo
from random import shuffle
from telebot import TeleBot, types
from telebot.types import InlineQueryResultArticle, InputTextMessageContent, InputInvoiceMessageContent, ReplyKeyboardMarkup
from apscheduler.schedulers.background import BackgroundScheduler
import pandas as pd
import re
import string

API_TOKEN = 'token' #Insert your token here
AUDIO_PATH = "voice_lessons" #Insert your folder location here
SUBSCRIBED_USERS_FILE = "subscribed_users.json"
UNITS = "https://docs.google.com/spreadsheets/d/e/2PACX-1vRUS3NpoMDo8CSULPn3cBm12wYX1p-8yAWzZaYizQn3G_F7-_Zpd5EduOiQFe9-1vqMQiA9JHgzsJPC/pub?gid=0&single=true&output=csv"
GROUPS = "https://docs.google.com/spreadsheets/d/e/2PACX-1vRUS3NpoMDo8CSULPn3cBm12wYX1p-8yAWzZaYizQn3G_F7-_Zpd5EduOiQFe9-1vqMQiA9JHgzsJPC/pub?gid=1530881854&single=true&output=csv"
SCORES_FILE = "scores.json"

bot = TeleBot(API_TOKEN)
scheduler = BackgroundScheduler()
df_units = pd.read_csv(UNITS)
df_groups = pd.read_csv(GROUPS)
auto_lessons_ids = []
group_id_to_name = {row['group_id']: row['name_ru'] for _, row in df_groups.iterrows()}

# Dictionaries to track user progress—Å—Å
current_lesson_index = {}
current_quiz_index = {}
active_quizzes = {}
dictant_state = {}
scramble_state = {}

lessons = []
audio_ids = []

for _, row in df_units.iterrows():
    komi = str(row.get("value", "")).strip()
    ru = str(row.get("translate_ru", "")).strip()
    audio_id = row.get("_id")
    group_id = row.get("group_id")

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ "–ë–µ–∑ —Ä–∞–∑–¥–µ–ª–∞")
    group_name = group_id_to_name.get(group_id, "–ë–µ–∑ —Ä–∞–∑–¥–µ–ª–∞")

    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç–æ–µ/–±–∏—Ç–æ–µ
    if komi and ru and pd.notnull(audio_id):
        lesson_number = len(lessons) + 1
        lessons.append(
            f"–£—Ä–æ–∫ {lesson_number}: {group_name}\n\n–§—Ä–∞–∑–∞: '{komi}' ‚Äî –æ–∑–Ω–∞—á–∞–µ—Ç '{ru}'.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —ç—Ç—É —Ñ—Ä–∞–∑—É!"
        )
        audio_ids.append(int(audio_id))

try:
    with open(SCORES_FILE, 'r') as f:
        user_scores = json.load(f)
except:
    user_scores = {}

def save_scores():
    with open(SCORES_FILE, 'w') as f:
        json.dump(user_scores, f)

def add_score(user_id, amount):
    user_id_str = str(user_id)
    user_scores[user_id_str] = user_scores.get(user_id_str, 0) + amount
    save_scores()

def get_username(user):
    if user.username:
        return f"@{user.username}"
    else:
        return f"{user.first_name}" if user.first_name else f"ID:{user.id}"

def pluralize_points(n):
    n = abs(int(n))
    if 10 < n % 100 < 20:
        return "–æ—á–∫–æ–≤"
    elif n % 10 == 1:
        return "–æ—á–∫–æ"
    elif 2 <= n % 10 <= 4:
        return "–æ—á–∫–∞"
    else:
        return "–æ—á–∫–æ–≤"

@bot.message_handler(commands=['rating'])
@bot.message_handler(func=lambda m: m.text == "üìä –†–µ–π—Ç–∏–Ω–≥")
def handle_rating_button(message):
    show_rating(message)
def show_rating(message):
    if not user_scores:
        bot.send_message(message.chat.id, "–†–µ–π—Ç–∏–Ω–≥ –ø–æ–∫–∞ –ø—É—Å—Ç. –ë—É–¥—å –ø–µ—Ä–≤—ã–º!")
        return

    sorted_scores = sorted(user_scores.items(), key=lambda x: x[1], reverse=True)
    user_id_str = str(message.from_user.id)

    text = "üèÜ –¢–æ–ø 20 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ—á–∫–∞–º:\n"
    found = False

    for i, (uid, score) in enumerate(sorted_scores[:20], 1):
        try:
            user = bot.get_chat(uid)
            name = get_username(user)
        except:
            name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid}"
        if uid == user_id_str:
            found = True
            text += f"{i}. {name}: {score} {pluralize_points(score)} üëà (—ç—Ç–æ –≤—ã)\n"
        else:
            text += f"{i}. {name}: {score} {pluralize_points(score)}\n"

    # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ —Ç–æ–ø-20, –ø–æ–∫–∞–∂–∏ –µ–≥–æ –ø–æ–∑–∏—Ü–∏—é –æ—Ç–¥–µ–ª—å–Ω–æ
    if not found and user_id_str in user_scores:
        for i, (uid, score) in enumerate(sorted_scores, 1):
            if uid == user_id_str:
                name = get_username(message.from_user)
                text += f"\nüîª –í—ã –Ω–∞ {i} –º–µ—Å—Ç–µ —Å {score} –æ—á–∫–∞–º–∏."
                break

    bot.send_message(message.chat.id, text)


# Functions to save/load subscribed users
def load_subscribed_users() -> set:
    try:
        with open(SUBSCRIBED_USERS_FILE, "r") as f:
            users = json.load(f)
            return set(users)
    except (FileNotFoundError, json.JSONDecodeError):
        return set()

def save_subscribed_users(users: set):
    with open(SUBSCRIBED_USERS_FILE, "w") as f:
        json.dump(list(users), f)

# Global set of subscribed users (chat_id)
subscribed_users = load_subscribed_users()

# Function to register a user (called on any interaction)
def register_user(chat_id):
    if chat_id not in subscribed_users:
        subscribed_users.add(chat_id)
        save_subscribed_users(subscribed_users)

def normalize_text(text):
    table = str.maketrans('', '', string.punctuation + '¬´¬ª‚Äî‚Ä¶‚Äì‚Äê‚Äë‚Äú‚Äù‚Äô‚Äò' + "!?.,:;‚Äì‚Äî()[]{}\"'")
    clean = text.lower().translate(table).replace("—ë", "–µ")
    clean = " ".join(clean.split())
    return clean.strip()

def normalize_phrase(text):
    table = str.maketrans('', '', string.punctuation + '¬´¬ª‚Äî‚Ä¶‚Äì‚Äê‚Äë‚Äú‚Äù‚Äô‚Äò!?.,:;‚Äì‚Äî()[]{}"\'')
    return text.lower().translate(table).replace("—ë", "–µ").replace(" ", "").strip()

# –ü–æ–ª—É—á–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∏-—Ñ—Ä–∞–∑—ã –∏–∑ lessons
existing_phrases_normalized = set()
for lesson in lessons:
    match = re.search(r"[\"'](.+?)[\"']", lesson)
    if match:
        phrase = normalize_text(match.group(1))
        existing_phrases_normalized.add(phrase)
        
auto_lessons = []
auto_lessons_ids = []
lesson_counter = len(lessons) + 1

for _, row in df_units.iterrows():
    komi = str(row.get("value", "")).strip()
    ru = str(row.get("translate_ru", "")).strip()
    audio_id = row.get("_id")
    if komi and ru and normalize_phrase(komi) not in existing_phrases_normalized and pd.notnull(audio_id):
        group_id = row.get("group_id")
        group_name = group_id_to_name.get(group_id, "–ë–µ–∑ —Ä–∞–∑–¥–µ–ª–∞")
        auto_lessons.append(
            f"–£—Ä–æ–∫ {lesson_counter}: {group_name}\n\n–§—Ä–∞–∑–∞: '{komi}' ‚Äî –æ–∑–Ω–∞—á–∞–µ—Ç '{ru}'.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —ç—Ç—É —Ñ—Ä–∞–∑—É!"
        )
        auto_lessons_ids.append(int(audio_id))
        lesson_counter += 1

lessons += auto_lessons

@bot.message_handler(commands=['lesson'])
def send_specific_lesson(message):
    register_user(message.chat.id)
    try:
        command_parts = message.text.strip().split()
        if len(command_parts) != 2:
            raise ValueError("–§–æ—Ä–º–∞—Ç: /lesson –Ω–æ–º–µ—Ä")
        number = int(command_parts[1])
        if 1 <= number <= len(lessons):
            send_lesson_with_voice(message.chat.id, number - 1)
            user_id = message.from_user.id
            current_lesson_index[user_id] = number
            save_lesson_progress()
        else:
            bot.send_message(message.chat.id, f"–£—Ä–æ–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º {number} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í—Å–µ–≥–æ —É—Ä–æ–∫–æ–≤: {len(lessons)}.")
    except Exception as e:
        bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /lesson 5")


# Quiz questions (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã–µ)
quiz_questions = []

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–≤–∏–∑—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
used_word_indices = set()
question_templates_ru_to_komi = [
    "–ö–∞–∫ –ø–æ-–∫–æ–º–∏ —Å–∫–∞–∑–∞—Ç—å: '{ru}'?",
    "–ö–∞–∫ –±—É–¥–µ—Ç –Ω–∞ –∫–æ–º–∏: '{ru}'?",
    "–ü–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ –∫–æ–º–∏: '{ru}'",
    "–ß—Ç–æ –Ω–∞ –∫–æ–º–∏ –æ–∑–Ω–∞—á–∞–µ—Ç —Ñ—Ä–∞–∑–∞: '{ru}'?",
    "–ö–∞–∫ –∑–≤—É—á–∏—Ç –ø–æ-–∫–æ–º–∏: '{ru}'?"
]

question_templates_komi_to_ru = [
    "–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å –∫–æ–º–∏: '{komi}'?",
    "–ß—Ç–æ –∑–Ω–∞—á–∏—Ç —Å–ª–æ–≤–æ '{komi}'?",
    "–ö–∞–∫ –ø–æ–Ω—è—Ç—å: '{komi}'?",
    "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç '{komi}'?",
    "–ö–∞–∫ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏: '{komi}'?"
]

def generate_auto_quiz():
    for idx, row in df_units.iterrows():
        if idx in used_word_indices:
            continue
        komi = str(row.get("value", "")).strip()
        ru = str(row.get("translate_ru", "")).strip()
        if not komi or not ru or ' ' in komi or ' ' in ru:
            continue

        used_word_indices.add(idx)
        if random.random() < 0.5:
            question = random.choice(question_templates_ru_to_komi).format(ru=ru)
            correct = komi
            options = [komi] + random.sample(
                [str(df_units.iloc[i]['value']) for i in random.sample(range(len(df_units)), 10)
                 if i != idx and isinstance(df_units.iloc[i]['value'], str)], 3)
        else:
            question = random.choice(question_templates_komi_to_ru).format(komi=komi)
            correct = ru
            options = [ru] + random.sample(
                [str(df_units.iloc[i]['translate_ru']) for i in random.sample(range(len(df_units)), 10)
                 if i != idx and isinstance(df_units.iloc[i]['translate_ru'], str)], 3)

        random.shuffle(options)
        correct_option_id = options.index(correct)

        quiz_questions.append({
            "question": question,
            "options": options,
            "correct_option_id": correct_option_id,
            "explanation": f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct}"
        })

random.seed(42)
generate_auto_quiz()

from random import shuffle

def is_single_word(word):
    word = str(word)
    word_clean = re.sub(r"[^\w”ß”±”ì”≠—ë√§√∂√º º'-]", '', word, flags=re.IGNORECASE)
    return ' ' not in word_clean and len(word_clean) > 0 and word_clean == word

filtered_words = [
    (re.sub(r"[^\w”ß”±”ì”≠—ë√§√∂√º º'-]", '', str(row['value'])), row['translate_ru'])
    for _, row in df_units.iterrows()
    if is_single_word(row['value']) and isinstance(row['translate_ru'], str)
]

def contains_latin_oi(text):
    # –õ–∞—Ç–∏–Ω—Å–∫–∞—è √ñ: U+00D6, U+00F6; –ª–∞—Ç–∏–Ω—Å–∫–∞—è I: U+0049, U+0069
    # –ö–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∞—è ”¶: U+04E6, U+04E7; –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∞—è –Ü: U+0406, U+0456
    for ch in text:
        code = ord(ch)
        # –õ–∞—Ç–∏–Ω—Å–∫–∞—è √ñ/√∂
        if code in (0x00D6, 0x00F6):
            return True
        # –õ–∞—Ç–∏–Ω—Å–∫–∞—è I/i
        if code in (0x0049, 0x0069):
            # –ù–æ –Ω–µ –µ—Å–ª–∏ —ç—Ç–æ —á–∞—Å—Ç—å –ª–∞—Ç–∏–Ω–∏—Ü—ã –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —Å–ª–æ–≤–µ, –∞ –µ—Å–ª–∏ –≤ –∫–æ–º–∏ —Å–ª–æ–≤–µ
            return True
    return False

@bot.message_handler(commands=['scramble'])
def scramble_task(message):
    user_id = message.from_user.id
    if not filtered_words:
        bot.send_message(message.chat.id, "–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–ª–æ–≤ –≤ –±–∞–∑–µ.")
        return
    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å–ª–æ–≤–∞–º –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –¥–æ –≤—ã—Ö–æ–¥–∞ –∏–ª–∏ –∫–æ–Ω—Ü–∞ –±–∞–∑—ã
    words_order = list(range(len(filtered_words)))
    random.shuffle(words_order)
    scramble_state[user_id] = {
        'indices': words_order,
        'current': 0,
        'correct': 0,
        'waiting_answer': False
    }
    send_next_scramble(message.chat.id, user_id)

def send_next_scramble(chat_id, user_id):
    state = scramble_state.get(user_id)
    if not state or state['current'] >= len(state['indices']):
        score = state['correct']
        bot.send_message(chat_id, f"–†–∞—É–Ω–¥ –æ–∫–æ–Ω—á–µ–Ω! –í—ã —Å–æ–±—Ä–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ {score} —Å–ª–æ–≤ –∏–∑ {len(state['indices'])}. –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é ‚Äî –∫–Ω–æ–ø–∫–∞ –Ω–∏–∂–µ.")
        scramble_state.pop(user_id, None)
        return

    idx = state['indices'][state['current']]
    word, translation = filtered_words[idx]
    letters = list(word)
    random.shuffle(letters)
    scrambled = " ".join(f"[{l}]" for l in letters)

    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add("–í –º–µ–Ω—é")
    bot.send_message(
        chat_id,
        f"–°–æ–±–µ—Ä–∏ —Å–ª–æ–≤–æ –ø–æ –ø–µ—Ä–µ–≤–æ–¥—É: ¬´{translation}¬ª\n–ë—É–∫–≤—ã –≤–ø–µ—Ä–µ–º–µ—à–∫—É: {scrambled}\n–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ:",
        reply_markup=kb
    )
    state['answer'] = word
    state['waiting_answer'] = True

all_lessons_info = []
for i in range(len(audio_ids)):
    m = re.search(r"['\"](.+?)['\"]", lessons[i])
    komi_text = m.group(1) if m else ""
    all_lessons_info.append({
        "komi": komi_text,
        "audio_id": audio_ids[i]
    })

@bot.message_handler(func=lambda m: m.text == "üéß–î–∏–∫—Ç–∞–Ω—Ç")
def start_dictant(message):
    user_id = message.from_user.id
    register_user(message.chat.id)
    indices = list(range(len(all_lessons_info)))
    random.shuffle(indices)
    dictant_state[user_id] = {
        'indices': indices,
        'current': 0,
        'correct': 0,
        'waiting_answer': False
    }
    send_next_dictant(message.chat.id, user_id)

def send_next_dictant(chat_id, user_id):
    state = dictant_state.get(user_id)
    if not state:
        # –ù–æ–≤—ã–π —Ä–∞—É–Ω–¥: —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ —Ñ—Ä–∞–∑
        indices = list(range(len(dictant_phrases)))
        random.shuffle(indices)
        dictant_state[user_id] = {
            'indices': indices,
            'current': 0,
            'correct': 0,
            'waiting_answer': False
        }
        state = dictant_state[user_id]
    while state['current'] < len(state['indices']):
        idx = state['indices'][state['current']]
        komi, translation, audio_id = dictant_phrases[idx]
        voice_path = os.path.join(AUDIO_PATH, f"{audio_id}.ogg")
        if os.path.exists(voice_path):
            kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            kb.add("–í –º–µ–Ω—é")
            caption = f"–î–∏–∫—Ç–∞–Ω—Ç {state['current']+1}.\n–í–≤–µ–¥–∏ —É—Å–ª—ã—à–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:"
            with open(voice_path, 'rb') as audio:
                bot.send_voice(chat_id, audio, caption=caption, reply_markup=kb)
            state['answer'] = komi
            state['waiting_answer'] = True
            return
        else:
            # –ï—Å–ª–∏ –∞—É–¥–∏–æ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É
            state['current'] += 1

    # –ï—Å–ª–∏ –≤—Å–µ —Ñ—Ä–∞–∑—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∏–ª–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —Å –∞—É–¥–∏–æ
    score = state['correct']
    dictant_state.pop(user_id, None)
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add("–í –º–µ–Ω—é")
    bot.send_message(chat_id, f"–î–∏–∫—Ç–∞–Ω—Ç –æ–∫–æ–Ω—á–µ–Ω! –í—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–ø–∏—Å–∞–ª–∏ {score} –∏–∑ {len(state['indices'])} —Ñ—Ä–∞–∑.", reply_markup=kb)

# –°–æ–±–∏—Ä–∞–µ–º –∞–≤—Ç–æ—É—Ä–æ–∫–∏
for i in range(len(auto_lessons)):
    m = re.search(r"['\"](.+?)['\"]", auto_lessons[i])
    komi_text = m.group(1) if m else ""
    audio_id = auto_lessons_ids[i]
    all_lessons_info.append({
        "komi": komi_text,
        "audio_id": audio_id
    })

# --- –ü–æ–∏—Å–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ –∫–æ–º–∏-—Ñ—Ä–∞–∑–µ ---
def find_translation(komi_text):
    norm_komi = normalize_text(komi_text)
    # 1. –ü–æ–∏—Å–∫ –≤ filtered_words
    for w, t in filtered_words:
        if normalize_text(w) == norm_komi:
            return t
    # 2. –ü–æ–∏—Å–∫ –≤ all_lessons_info + df_units
    for row in df_units.itertuples():
        if normalize_text(str(row.value)) == norm_komi:
            return str(row.translate_ru)
    return None
# --- –∫–æ–Ω–µ—Ü –ø–æ–∏—Å–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ ---

# –î–ª—è –¥–∏–∫—Ç–∞–Ω—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ —Ñ—Ä–∞–∑—ã, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ —Å–ª–æ–≤–∞

dictant_phrases = [
    (info['komi'], find_translation(info['komi']), info['audio_id'])
    for info in all_lessons_info
    if info['komi'] and info['audio_id']
]

@bot.message_handler(func=lambda m: scramble_state.get(m.from_user.id, {}).get('waiting_answer', False))
def scramble_answer(message):
    user_id = message.from_user.id
    state = scramble_state.get(user_id)
    if not state:
        return
    if message.text.strip().lower() == "–≤ –º–µ–Ω—é":
        scramble_state.pop(user_id, None)
        start(message)
        return
    else:
        user_norm = normalize_text(message.text)
        answer_norm = normalize_text(state['answer'])
        warn = ""
        if contains_latin_oi(message.text):
            warn = "\n‚ö†Ô∏è –ü–æ—Ö–æ–∂–µ, –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã √ñ –∏–ª–∏ i –≤–º–µ—Å—Ç–æ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏—Ö. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–æ–º–∏-—Ä–∞—Å–∫–ª–∞–¥–∫–µ: http://wiki.fu-lab.ru/index.php/–ö–æ–º–∏_—Ä–∞—Å–∫–ª–∞–¥–∫–∞_–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"
        idx = state['indices'][state['current']]
        word, _ = filtered_words[idx]
        translation = find_translation(word)
        word_bold = f"<b>{word}</b>"
        if user_norm == answer_norm:
            state['correct'] += 1
            add_score(user_id, 5)
            bot.send_message(
                message.chat.id,
                f"–ó—ç–≤ –±—É—Ä! üéâ –í—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ!\n\n{word_bold} ‚Äî {translation if translation else '-'}{warn}",
                parse_mode="HTML"
            )
        else:
            bot.send_message(
                message.chat.id,
                f"‚ùå –ù–µ—Ç, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:\n\n{word_bold} ‚Äî {translation if translation else '-'}{warn}",
                parse_mode="HTML"
            )
    state['current'] += 1
    state['waiting_answer'] = False
    send_next_scramble(message.chat.id, user_id)

@bot.message_handler(func=lambda m: dictant_state.get(m.from_user.id, {}).get('waiting_answer', False))
def dictant_answer(message):
    user_id = message.from_user.id
    state = dictant_state.get(user_id)
    if not state:
        return

    if message.text.strip().lower() == "–≤ –º–µ–Ω—é":
        dictant_state.pop(user_id, None)
        start(message)
        return
    else:
        user_norm = normalize_text(message.text)
        answer_norm = normalize_text(state['answer'])
        warn = ""
        if contains_latin_oi(message.text):
            warn = "\n‚ö†Ô∏è –ü–æ—Ö–æ–∂–µ, –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã √ñ –∏–ª–∏ I –≤–º–µ—Å—Ç–æ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏—Ö ”¶ –∏–ª–∏ –Ü. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–æ–º–∏-—Ä–∞—Å–∫–ª–∞–¥–∫–µ: http://wiki.fu-lab.ru/index.php/–ö–æ–º–∏_—Ä–∞—Å–∫–ª–∞–¥–∫–∞_–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"
        komi_text = state['answer']
        translation = find_translation(komi_text)
        komi_bold = f"<b>{komi_text}</b>"
        if user_norm == answer_norm:
            state['correct'] += 1
            add_score(user_id, 7)
            bot.send_message(
                message.chat.id,
                f"–ó—ç–≤ –±—É—Ä! ‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ!\n\n{komi_bold} ‚Äî {translation if translation else '-'}{warn}\n–ò–¥—ë–º –¥–∞–ª—å—à–µ!",
                parse_mode="HTML"
            )
        else:
            bot.send_message(
                message.chat.id,
                f"‚ùå –ù–µ—Ç, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:\n\n{komi_bold} ‚Äî {translation if translation else '-'}{warn}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!",
                parse_mode="HTML"
            )
    state['current'] += 1
    state['waiting_answer'] = False
    send_next_dictant(message.chat.id, user_id)

def save_lesson_progress():
    with open(LESSON_PROGRESS_FILE, 'w') as f:
        json.dump(current_lesson_index, f)

def save_quiz_progress():
    with open(QUIZ_PROGRESS_FILE, 'w') as f:
        json.dump(quiz_progress, f)

def save_subscribed_users(users: set):
    with open(SUBSCRIBED_USERS_FILE, "w") as f:
        json.dump(list(users), f)

def load_subscribed_users() -> set:
    try:
        with open(SUBSCRIBED_USERS_FILE, "r") as f:
            users = json.load(f)
            return set(users)
    except (FileNotFoundError, json.JSONDecodeError):
        return set()

def register_user(chat_id):
    if chat_id not in subscribed_users:
        subscribed_users.add(chat_id)
        save_subscribed_users(subscribed_users)

def normalize_text(text):
    table = str.maketrans('', '', string.punctuation + '¬´¬ª‚Äî‚Ä¶‚Äì‚Äê‚Äë‚Äú‚Äù‚Äô‚Äò' + "!?.,:;‚Äì‚Äî()[]{}\"'")
    clean = text.lower().translate(table).replace("—ë", "–µ")
    clean = " ".join(clean.split())
    return clean.strip()

def normalize_phrase(text):
    table = str.maketrans('', '', string.punctuation + '¬´¬ª‚Äî‚Ä¶‚Äì‚Äê‚Äë‚Äú‚Äù‚Äô‚Äò!?.,:;‚Äì‚Äî()[]{}"\'')
    return text.lower().translate(table).replace("—ë", "–µ").replace(" ", "").strip()

# --- NEW: Progress persistence ---
LESSON_PROGRESS_FILE = "lesson_progress.json"
QUIZ_PROGRESS_FILE = "quiz_progress.json"

# user_id: lesson_index
try:
    with open(LESSON_PROGRESS_FILE, 'r') as f:
        current_lesson_index = json.load(f)
        current_lesson_index = {int(k): v for k, v in current_lesson_index.items()}
except:
    current_lesson_index = {}

def save_lesson_progress():
    with open(LESSON_PROGRESS_FILE, 'w') as f:
        json.dump(current_lesson_index, f)

# user_id: {"current": int, "passed": [int]}
try:
    with open(QUIZ_PROGRESS_FILE, 'r') as f:
        quiz_progress = json.load(f)
        quiz_progress = {int(k): v for k, v in quiz_progress.items()}
except:
    quiz_progress = {}

def save_quiz_progress():
    with open(QUIZ_PROGRESS_FILE, 'w') as f:
        json.dump(quiz_progress, f)
# --- END progress persistence ---

# Handler for /start command
@bot.message_handler(commands=['start'])
def start(message):
    register_user(message.chat.id)
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üìò–£—Ä–æ–∫")
    keyboard.add("‚úÖ–ù–∞—á–∞—Ç—å –∫–≤–∏–∑", "üéß–î–∏–∫—Ç–∞–Ω—Ç", "üî§ –°–æ–±–µ—Ä–∏ —Å–ª–æ–≤–æ")
    keyboard.add("üìä –†–µ–π—Ç–∏–Ω–≥", "‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    bot.send_message(message.chat.id, "–ß–æ–ª”ß–ºüëã —è –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∫–æ–º–∏ —è–∑—ã–∫–∞! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

# –ö–Ω–æ–ø–∫–∞ "–°–æ–±–µ—Ä–∏ —Å–ª–æ–≤–æ" –≤—ã–∑—ã–≤–∞–µ—Ç scramble-—Ä–µ–∂–∏–º
@bot.message_handler(func=lambda message: message.text == "üî§ –°–æ–±–µ—Ä–∏ —Å–ª–æ–≤–æ")
def menu_scramble(message):
    scramble_task(message)

@bot.message_handler(func=lambda message: message.text == "üìò–£—Ä–æ–∫")
def lesson_button(message):
    register_user(message.chat.id)
    user_id = message.from_user.id
    lesson_index = current_lesson_index.get(user_id, 0)
    if lesson_index < len(lessons):
        send_lesson_with_voice(message.chat.id, lesson_index)
        current_lesson_index[user_id] = lesson_index + 1
        save_lesson_progress()
    else:
        bot.send_message(message.chat.id, "–í—Å–µ —É—Ä–æ–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! –ñ–¥–∏—Ç–µ –Ω–æ–≤—ã—Ö.")

def send_lesson_with_voice(chat_id, lesson_index):
    bot.send_message(chat_id, lessons[lesson_index])
    audio_id = None
    if lesson_index < len(audio_ids):
        audio_id = audio_ids[lesson_index]
    else:
        auto_index = lesson_index - len(audio_ids)
        if 0 <= auto_index < len(auto_lessons_ids):
            audio_id = auto_lessons_ids[auto_index]
    if audio_id:
        voice_file = f"{audio_id}.ogg"
        voice_path = os.path.join(AUDIO_PATH, voice_file)
        if os.path.exists(voice_path):
            try:
                with open(voice_path, 'rb') as audio:
                    bot.send_voice(chat_id, audio, caption="üîä –ü—Ä–æ—Å–ª—É—à–∞–π—Ç–µ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ —Ñ—Ä–∞–∑—ã")
            except Exception as e:
                bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞.")
        else:
            bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –∞—É–¥–∏–æ –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
    else:
        bot.send_message(chat_id, "–ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞.")

# Quiz functions
@bot.message_handler(func=lambda message: message.text == "‚úÖ–ù–∞—á–∞—Ç—å –∫–≤–∏–∑")
def start_quiz(message):
    register_user(message.chat.id)
    user_id = message.from_user.id
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_quiz = quiz_progress.get(user_id, {"current": 0, "passed": []})
    quiz_progress[user_id] = user_quiz
    save_quiz_progress()
    question_index = user_quiz["current"]
    if question_index < len(quiz_questions):
        question_data = quiz_questions[question_index]
        send_quiz(message.chat.id, question_data, user_id)
    else:
        bot.send_message(message.chat.id, "–í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ –≤—Å–µ –∫–≤–∏–∑—ã!")

def send_quiz(chat_id, question_data, user_id):
    msg = bot.send_poll(
        chat_id=chat_id,
        question=question_data["question"],
        options=question_data["options"],
        is_anonymous=False,
        type='quiz',
        correct_option_id=question_data["correct_option_id"],
        open_period=60
    )
    active_quizzes[msg.poll.id] = (user_id, chat_id, quiz_progress[user_id]["current"])

@bot.poll_answer_handler()
def handle_poll_answer(poll_answer):
    poll_id = poll_answer.poll_id
    user_id = poll_answer.user.id
    if poll_id not in active_quizzes:
        return
    stored_user_id, chat_id, question_index = active_quizzes[poll_id]
    if stored_user_id != user_id:
        return
    question_data = quiz_questions[question_index]
    user_quiz = quiz_progress.get(user_id, {"current": 0, "passed": []})
    if poll_answer.option_ids and poll_answer.option_ids[0] == question_data["correct_option_id"]:
        # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –µ—â—ë –Ω–µ –±—ã–ª —Ä–µ—à—ë–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚Äî –Ω–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã
        if question_index not in user_quiz["passed"]:
            add_score(user_id, 4)
            user_quiz["passed"].append(question_index)
        del active_quizzes[poll_id]
    else:
        explanation = question_data.get("explanation", "–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç.")
        bot.send_message(chat_id=chat_id, text=explanation)
        del active_quizzes[poll_id]
    user_quiz["current"] = question_index + 1
    quiz_progress[user_id] = user_quiz
    save_quiz_progress()
    if user_quiz["current"] < len(quiz_questions):
        next_question_data = quiz_questions[user_quiz["current"]]
        msg = bot.send_poll(
            chat_id=chat_id,
            question=next_question_data["question"],
            options=next_question_data["options"],
            is_anonymous=False,
            type='quiz',
            correct_option_id=next_question_data["correct_option_id"],
            open_period=60
        )
        active_quizzes[msg.poll.id] = (user_id, chat_id, user_quiz["current"])
    else:
        bot.send_message(chat_id=chat_id, text="–ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!")
        if user_id in quiz_progress:
            quiz_progress[user_id]["current"] = len(quiz_questions)
            save_quiz_progress()

@bot.message_handler(func=lambda message: message.text == "‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
def settings_menu(message):
    user_id = message.from_user.id
    is_on = user_id in auto_subscribed_users
    time_str = user_times.get(user_id, '11:30')
    text = (
        "ü§ñ –≠—Ç–æ –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∫–æ–º–∏ —è–∑—ã–∫–∞. –í–æ—Ç —á—Ç–æ —É–º–µ—é—Ç –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é:\n\n\nüìò–£—Ä–æ–∫ - –ò–∑—É—á–∏—Ç—å —É—Ä–æ–∫–∏\n\n‚úÖ –ù–∞—á–∞—Ç—å –∫–≤–∏–∑ - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ç–µ—Å—Ç–∞\n\nüéß –î–∏–∫—Ç–∞–Ω—Ç - –ø—Ä–æ—Å–ª—É—à–∞—Ç—å –∞—É–¥–∏–æ –∏ –Ω–∞–ø–∏—Å–∞—Ç—å —É—Å–ª—ã—à–∞–Ω–Ω—É—é —Ñ—Ä–∞–∑—É\n\nüî§ –°–æ–±–µ—Ä–∏ —Å–ª–æ–≤–æ - –∏–≥—Ä–∞ –Ω–∞ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã—Ö –±—É–∫–≤\n\n‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n–¢–∞–∫–∂–µ –≤ –±–æ—Ç–µ –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã:\n\n/start - –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n/lesson {–ù–æ–º–µ—Ä —É—Ä–æ–∫–∞} - –æ—Ç–∫—Ä—ã—Ç—å —É—Ä–æ–∫ –ø–æ –Ω–æ–º–µ—Ä—É\n/resetquiz - –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–≤–∏–∑–æ–≤ —Å –Ω–∞—á–∞–ª–∞\n\n\n–ö–∞–∂–¥—ã–π —É—Ä–æ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—Ä–∞–∑—É –Ω–∞ –∫–æ–º–∏ —è–∑—ã–∫–µ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º –∏ –∞—É–¥–∏–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ–º.\n–£—á–∏—Ç–µ—Å—å, –ø—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ—Å—å –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å–æ–º! üòä\n\n–ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚è≤Ô∏è–†–∞—Å—Å—ã–ª–∫–∞", "–í –º–µ–Ω—é")
    bot.send_message(message.chat.id, text, reply_markup=kb, parse_mode="HTML")

@bot.message_handler(func=lambda message: message.text == "‚è≤Ô∏è–†–∞—Å—Å—ã–ª–∫–∞")
def mailing_settings(message):
    user_id = message.from_user.id
    is_on = user_id in auto_subscribed_users
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if is_on:
        kb.add("–í–∫–ª—é—á–∏—Ç—å ‚úîÔ∏è", "–í—ã–∫–ª—é—á–∏—Ç—å", "–í –º–µ–Ω—é")
        time_str = user_times.get(user_id, '09:00')
        text = (
            "‚è≤Ô∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
            f"–°—Ç–∞—Ç—É—Å: <b>–í–∫–ª—é—á–µ–Ω–∞</b>\n"
            f"–í—Ä–µ–º—è: <b>{time_str}</b>\n\n"
            f"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è, –Ω–∞–∂–º–∏—Ç–µ —Å–Ω–æ–≤–∞ '<b>–í–∫–ª—é—á–∏—Ç—å</b>':"
        )
    else:
        kb.add("–í–∫–ª—é—á–∏—Ç—å", "–í—ã–∫–ª—é—á–∏—Ç—å ‚úîÔ∏è", "–í –º–µ–Ω—é")
        text = (
            "‚è≤Ô∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
            "–°—Ç–∞—Ç—É—Å: <b>–í—ã–∫–ª—é—á–µ–Ω–∞</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
    bot.send_message(message.chat.id, text, reply_markup=kb, parse_mode="HTML")

@bot.message_handler(func=lambda message: message.text in ["–í–∫–ª—é—á–∏—Ç—å", "–í–∫–ª—é—á–∏—Ç—å ‚úîÔ∏è"])
def mailing_enable(message):
    user_id = message.from_user.id
    auto_subscribed_users.add(user_id)
    save_auto_subscribers()
    schedule_user_job(user_id)
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("–í –º–µ–Ω—é")
    bot.send_message(message.chat.id, "–†–∞—Å—Å—ã–ª–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞!\n\n–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:30), –∫–æ–≥–¥–∞ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É—Ä–æ–∫–∏:", reply_markup=kb)
    bot.register_next_step_handler(message, mailing_set_time)

@bot.message_handler(func=lambda message: message.text in ["–í—ã–∫–ª—é—á–∏—Ç—å", "–í—ã–∫–ª—é—á–∏—Ç—å ‚úîÔ∏è"])
def mailing_disable(message):
    user_id = message.from_user.id
    if user_id in auto_subscribed_users:
        auto_subscribed_users.remove(user_id)
        save_auto_subscribers()
        remove_user_job(user_id)
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("–í –º–µ–Ω—é")
    bot.send_message(message.chat.id, "–†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞.", reply_markup=kb)

# –í–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Å—ã–ª–∫–∏

def mailing_set_time(message):
    user_id = message.from_user.id
    time_text = message.text.strip()
    if not re.match(r"^\d{1,2}:\d{2}$", time_text):
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:30)")
        bot.register_next_step_handler(message, mailing_set_time)
        return
    hour, minute = map(int, time_text.split(":"))
    if not (0 <= hour < 24 and 0 <= minute < 60):
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è. –ß–∞—Å—ã 0-23, –º–∏–Ω—É—Ç—ã 0-59.")
        bot.register_next_step_handler(message, mailing_set_time)
        return
    user_times[user_id] = f"{hour:02d}:{minute:02d}"
    save_user_times()
    schedule_user_job(user_id)
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("–í –º–µ–Ω—é")
    bot.send_message(message.chat.id, f"–í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {hour:02d}:{minute:02d}.", reply_markup=kb)

@bot.message_handler(func=lambda message: message.text == "‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
def help_command(message):
    settings_menu(message)

# --- –ê–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∞ —É—Ä–æ–∫–æ–≤ ---
from datetime import datetime, timedelta
from apscheduler.triggers.cron import CronTrigger

SUBSCRIBED_USERS_FILE = "subscribed_users.json"
USER_TIMES_FILE = "user_times.json"

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏ –∏—Ö –≤—Ä–µ–º—è
try:
    with open(SUBSCRIBED_USERS_FILE, "r") as f:
        auto_subscribed_users = set(json.load(f))
except:
    auto_subscribed_users = set()

try:
    with open(USER_TIMES_FILE, "r") as f:
        user_times = json.load(f)
        user_times = {int(k): v for k, v in user_times.items()}
except:
    user_times = {}

def save_auto_subscribers():
    with open(SUBSCRIBED_USERS_FILE, "w") as f:
        json.dump(list(auto_subscribed_users), f)

def save_user_times():
    with open(USER_TIMES_FILE, "w") as f:
        json.dump(user_times, f)

def schedule_user_job(user_id):
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–¥–∞—á—É
    remove_user_job(user_id)
    if user_id not in auto_subscribed_users:
        return
    time_str = user_times.get(user_id, "12:00")
    hour, minute = map(int, time_str.split(":"))
    job_id = f"lesson_{user_id}"
    scheduler.add_job(
        send_random_lesson_job,
        CronTrigger(hour=hour, minute=minute),
        args=[user_id],
        id=job_id,
        replace_existing=True
    )

def remove_user_job(user_id):
    job_id = f"lesson_{user_id}"
    try:
        scheduler.remove_job(job_id)
    except Exception:
        pass

def send_random_lesson_job(user_id):
    try:
        chat_id = user_id
        lesson_index = random.randint(0, len(lessons) - 1)
        send_lesson_with_voice(chat_id, lesson_index)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è {user_id}: {e}")

# –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º –≤—Å–µ –∑–∞–¥–∞—á–∏
for user_id in auto_subscribed_users:
    schedule_user_job(user_id)

scheduler.start()
# --- –∫–æ–Ω–µ—Ü –∞–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∏ ---

# Handler for /resetquiz command
@bot.message_handler(commands=['resetquiz'])
def reset_quiz(message):
    user_id = message.from_user.id
    quiz_progress[user_id] = {"current": 0, "passed": quiz_progress.get(user_id, {}).get("passed", [])}
    save_quiz_progress()
    bot.send_message(message.chat.id, "–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫–≤–∏–∑—É —Å–±—Ä–æ—à–µ–Ω. –ë–∞–ª–ª—ã –∑–∞ —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–µ—à—ë–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –±–æ–ª—å—à–µ –Ω–µ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è, –∞ –∑–∞ —Ç–µ, —á—Ç–æ –±—ã–ª–∏ –æ—à–∏–±–æ—á–Ω—ã ‚Äî –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏.")

@bot.message_handler(func=lambda message: message.text == "–í –º–µ–Ω—é")
def back_to_menu(message):
    start(message)
    
for user_id in subscribed_users:
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üìò–£—Ä–æ–∫")
    kb.add("‚úÖ–ù–∞—á–∞—Ç—å –∫–≤–∏–∑", "üéß–î–∏–∫—Ç–∞–Ω—Ç", "üî§ –°–æ–±–µ—Ä–∏ —Å–ª–æ–≤–æ")
    kb.add("üìä –†–µ–π—Ç–∏–Ω–≥", "‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    bot.send_message(user_id, "üöÄ –í—ã–ª—å–º”ß–¥”ß–º! –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ!\n\n - –û–±–Ω–æ–≤–ª–µ–Ω–æ –º–µ–Ω—é\n - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—à–∏–±–∫–∏\n - –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã\n - –î–æ–±–∞–≤–ª–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É —Å —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö", reply_markup=kb)

if __name__ == "__main__":
    bot.polling(none_stop=True)