import os
import json
import random
from datetime import time as dtime
from zoneinfo import ZoneInfo
from telebot import TeleBot, types
from telebot.types import InlineQueryResultArticle, InputTextMessageContent
from apscheduler.schedulers.background import BackgroundScheduler

API_TOKEN = 'token'
SUBSCRIBED_USERS_FILE = "subscribed_users.json"

bot = TeleBot(API_TOKEN)
scheduler = BackgroundScheduler()

# Functions to save/load subscribed users
def load_subscribed_users() -> set:
    try:
        with open(SUBSCRIBED_USERS_FILE, "r") as f:
            users = json.load(f)
            return set(users)
    except (FileNotFoundError, json.JSONDecodeError):
        return set()

def save_subscribed_users(users: set):
    with open(SUBSCRIBED_USERS_FILE, "w") as f:
        json.dump(list(users), f)

# Global set of subscribed users (chat_id)
subscribed_users = load_subscribed_users()

# Function to register a user (called on any interaction)
def register_user(chat_id):
    if chat_id not in subscribed_users:
        subscribed_users.add(chat_id)
        save_subscribed_users(subscribed_users)

# Lessons (example)
lessons = [
    "–£—Ä–æ–∫ 1: üí°–û—Å–Ω–æ–≤—ã –∫–æ–º–∏ —è–∑—ã–∫–∞.\n\n–§—Ä–∞–∑–∞: '–í–∏–¥–∑–∞ –æ–ª–∞–Ω–Ω—ã–¥!!' ‚Äî –æ–∑–Ω–∞—á–∞–µ—Ç '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!'.\n–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å —ç—Ç—É —Ñ—Ä–∞–∑—É!",
    "–£—Ä–æ–∫ 2: üëã–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ.\n\n–§—Ä–∞–∑–∞: '–ß–æ–ª”ß–º!' ‚Äî –æ–∑–Ω–∞—á–∞–µ—Ç '–ü—Ä–∏–≤–µ—Ç!'.\n–ó–∞–ø–æ–º–Ω–∏ —ç—Ç—É —Ñ—Ä–∞–∑—É!",
    "–£—Ä–æ–∫ 3: üè°–ì–æ—Å—Ç–µ–ø—Ä–∏–∏–º—Å—Ç–≤–æ.\n\n–§—Ä–∞–∑–∞: '–†–∞–¥–ø—ã—Ä—ã—Å—å –∫–æ—Ä–∞–º' ‚Äî –æ–∑–Ω–∞—á–∞–µ—Ç '–° —Ä–∞–¥–æ—Å—Ç—å—é –ø—Ä–∏–≥–ª–∞—à–∞–µ–º!'.\n–ü–æ–ø—Ä–æ–±—É–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ—ë –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏!",
    "–£—Ä–æ–∫ 4: ‚ùì–í–æ–ø—Ä–æ—Å.\n\n–§—Ä–∞–∑–∞: '–ö—ã–¥–∑–∏ –æ–ª–∞–Ω?' ‚Äî –æ–∑–Ω–∞—á–∞–µ—Ç '–ö–∞–∫ –ø–æ–∂–∏–≤–∞–µ—à—å?'.\n–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å —ç—Ç—É —Ñ—Ä–∞–∑—É!",
    "–£—Ä–æ–∫ 5: üôè–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å.\n\n–§—Ä–∞–∑–∞: '–ê—Ç—Ç—å”ß, –±—É—Ä–∞' ‚Äî –æ–∑–Ω–∞—á–∞—é—Ç '–°–ø–∞—Å–∏–±–æ, —Ö–æ—Ä–æ—à–æ'.\n–ó–∞–ø–æ–º–Ω–∏ —ç—Ç—É —Ñ—Ä–∞–∑—É!",
    "–£—Ä–æ–∫ 6: üÜí–≠–ø–∏—Ç–µ—Ç—ã.\n\n–°–ª–æ–≤–∞: '–®–∞–Ω—å, –±—É—Ä' ‚Äî –æ–∑–Ω–∞—á–∞–µ—Ç '–î–æ–±—Ä—ã–π, —Ö–æ—Ä–æ—à–∏–π'.\n–ü–æ–ø—Ä–æ–±—É–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏!",
    "–£—Ä–æ–∫ 7: üå†–ü–æ–∂–µ–ª–∞–Ω–∏–µ.\n\n–§—Ä–∞–∑–∞: '–°—Ç–∞–≤ –±—É—Ä—Å”ß!' ‚Äî –æ–∑–Ω–∞—á–∞–µ—Ç '–í—Å–µ–≥–æ —Ö–æ—Ä–æ—à–µ–≥–æ!!'.\n–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å —ç—Ç—É —Ñ—Ä–∞–∑—É!",
    "–£—Ä–æ–∫ 8: üó£–û–±—Ä–∞—â–µ–Ω–∏–µ.\n\n–§—Ä–∞–∑–∞: '–ü—ã–¥–¥–∏ –ø—É–∫—Ç–∞–Ω–∞ —ë—Ä—Ç—ä—è—Å!' ‚Äî –æ–∑–Ω–∞—á–∞–µ—Ç '–£–≤–∞–∂–∞–µ–º—ã–µ –¥—Ä—É–∑—å—è!'.\n–ó–∞–ø–æ–º–Ω–∏ —ç—Ç—É —Ñ—Ä–∞–∑—É!",
    "–£—Ä–æ–∫ 9: üéâ–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ.\n\n–§—Ä–∞–∑–∞: '–ß–æ–ª”ß–º–∞–ª–∞ —Ç—ç–Ω”ß!' ‚Äî –æ–∑–Ω–∞—á–∞–µ—Ç '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Ç–µ–±—è!'.\n–ü–æ–ø—Ä–æ–±—É–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ—ë –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏!",
    "–£—Ä–æ–∫ 10: üìõ–ò–º—è.\n\n–í–æ–ø—Ä–æ—Å: '–ö—ã–¥–∑–∏ —Ç—ç–Ω–∞–¥ –Ω–∏–º—ã–¥?' ‚Äî –æ–∑–Ω–∞—á–∞–µ—Ç '–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?!'.\n–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å!",
    "–£—Ä–æ–∫ 11: üíÅ‚Äç‚ôÇÔ∏è–ü–æ–º–æ—â—å.\n\n–í–æ–ø—Ä–æ—Å: '–û—Ç—Å—ã—à—Ç–Ω—ã –≤–µ—Ä–º–∞ –æ–≥?!' ‚Äî –æ–∑–Ω–∞—á–∞–µ—Ç '–ú–æ–≥—É –ª–∏ —è –ø–æ–º–æ—á—å?!'.\n–ó–∞–ø–æ–º–Ω–∏ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å!",
    "–£—Ä–æ–∫ 12: üìñ–£—á—ë–±–∞.\n\n–§—Ä–∞–∑–∞: '–ö–æ–º–∏ –∫—ã–≤ –≤–µ–ª”ß–¥–∞' ‚Äî –æ–∑–Ω–∞—á–∞–µ—Ç '–£—á—É –∫–æ–º–∏ —è–∑—ã–∫'.\n–ó–∞–ø–æ–º–Ω–∏ —ç—Ç—É —Ñ—Ä–∞–∑—É!",
    "–£—Ä–æ–∫ 13: üë®‚Äçüéì–û—Å–Ω–æ–≤—ã –∫–æ–º–∏ —è–∑—ã–∫–∞.\n\n–í–æ–ø—Ä–æ—Å: '–ö—É—Ç—à”ß–º –ª—É–Ω”ß –∫–æ–º–∏ –∫—ã–≤–π—ã—Å—å —ç–∫–∑–∞–º–µ–Ω?' ‚Äî –æ–∑–Ω–∞—á–∞–µ—Ç '–í –∫–∞–∫–æ–π –¥–µ–Ω—å –ø–æ –∫–æ–º–∏ —è–∑—ã–∫—É —ç–∫–∑–∞–º–µ–Ω?!'.\n–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å!",
    "–£—Ä–æ–∫ 14: üò¥–§—Ä–∞–∑–∞ –∫–æ —Å–Ω—É.\n\n–§—Ä–∞–∑–∞: '–ë—É—Ä –≤–æ–π!' ‚Äî –æ–∑–Ω–∞—á–∞–µ—Ç '–î–æ–±—Ä–æ–π –Ω–æ—á–∏!'.\n–ó–∞–ø–æ–º–Ω–∏ —ç—Ç—É —Ñ—Ä–∞–∑—É!",
    "–£—Ä–æ–∫ 15: üëã–ü—Ä–æ—â–∞–Ω–∏–µ.\n\n–§—Ä–∞–∑–∞: '–ê–¥–¥–∑—ã—Å—å–ª—ã—Ç”ß–¥–∑!' ‚Äî –æ–∑–Ω–∞—á–∞–µ—Ç '–î–æ –≤—Å—Ç—Ä–µ—á–∏! –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!'.\n–ü–æ–ø—Ä–æ–±—É–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ—ë –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏!",
]

# Quiz questions with added "explanation" field
quiz_questions = [
    {
        "question": "–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è '–ß–æ–ª”ß–º'?",
        "options": ["–°–ø–∞—Å–∏–±–æ", "–ü—Ä–∏–≤–µ—Ç", "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è", "–ò–∑–≤–∏–Ω–∏—Ç–µ"],
        "correct_option_id": 1,
        "explanation": "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: –ü—Ä–∏–≤–µ—Ç. '–ß–æ–ª”ß–º' –æ–∑–Ω–∞—á–∞–µ—Ç '–ü—Ä–∏–≤–µ—Ç'."
    },
    {
        "question": "–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è '–í–∏–¥–∑–∞ –æ–ª–∞–Ω–Ω—ã–¥'?",
        "options": ["–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å", "–ò–∑–≤–∏–Ω–∏—Ç–µ", "–°–ø–∞—Å–∏–±–æ", "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ"],
        "correct_option_id": 3,
        "explanation": "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. '–í–∏–¥–∑–∞ –æ–ª–∞–Ω–Ω—ã–¥' –æ–∑–Ω–∞—á–∞–µ—Ç '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ'."
    },
    {
        "question": "–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è '–†–∞–¥–ø—ã—Ä—ã—Å—å –∫–æ—Ä–∞–º'?",
        "options": ["–î–æ —Å–≤–∏–¥–∞–Ω–∏—è", "–° —Ä–∞–¥–æ—Å—Ç—å—é –ø—Ä–∏–≥–ª–∞—à–∞–µ–º", "–ü—Ä–∏–≤–µ—Ç", "–ò–∑–≤–∏–Ω–∏—Ç–µ"],
        "correct_option_id": 1,
        "explanation": "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: –° —Ä–∞–¥–æ—Å—Ç—å—é –ø—Ä–∏–≥–ª–∞—à–∞–µ–º. '–†–∞–¥–ø—ã—Ä—ã—Å—å –∫–æ—Ä–∞–º' –æ–∑–Ω–∞—á–∞–µ—Ç '–° —Ä–∞–¥–æ—Å—Ç—å—é –ø—Ä–∏–≥–ª–∞—à–∞–µ–º'."
    }
]

# Dictionaries to track user progress
current_lesson_index = {}
current_quiz_index = {}
# active_quizzes stores for each active poll (poll_id) a tuple: (user_id, chat_id, question_index)
active_quizzes = {}

# Handler for /start command
@bot.message_handler(commands=['start'])
def start(message):
    register_user(message.chat.id)
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("–ù–∞—á–∞—Ç—å —É—Ä–æ–∫", "–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫", "–ù–∞—á–∞—Ç—å –∫–≤–∏–∑")
    keyboard.add("–ü–æ–º–æ—â—å")
    bot.send_message(message.chat.id, "–ß–æ–ª”ß–º, —è –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∫–æ–º–∏ —è–∑—ã–∫–∞! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

def send_lesson(chat_id, lesson_index):
    bot.send_message(chat_id, lessons[lesson_index])

@bot.message_handler(func=lambda message: message.text == "–ù–∞—á–∞—Ç—å —É—Ä–æ–∫")
def start_lesson(message):
    register_user(message.chat.id)
    user_id = message.from_user.id
    if user_id not in current_lesson_index:
        current_lesson_index[user_id] = 0

    lesson_index = current_lesson_index[user_id]
    if lesson_index < len(lessons):
        send_lesson(message.chat.id, lesson_index)
    else:
        bot.send_message(message.chat.id, "–í—Å–µ —É—Ä–æ–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! –ñ–¥–∏—Ç–µ –Ω–æ–≤—ã—Ö.")

@bot.message_handler(func=lambda message: message.text == "–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫")
def next_lesson(message):
    register_user(message.chat.id)
    user_id = message.from_user.id
    if user_id not in current_lesson_index:
        current_lesson_index[user_id] = 0

    current_lesson_index[user_id] += 1
    lesson_index = current_lesson_index[user_id]

    if lesson_index < len(lessons):
        send_lesson(message.chat.id, lesson_index)
    else:
        bot.send_message(message.chat.id, "–í—Å–µ —É—Ä–æ–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! –ñ–¥–∏—Ç–µ –Ω–æ–≤—ã—Ö.")

# Quiz functions
@bot.message_handler(func=lambda message: message.text == "–ù–∞—á–∞—Ç—å –∫–≤–∏–∑")
def start_quiz(message):
    register_user(message.chat.id)
    user_id = message.from_user.id
    current_quiz_index[user_id] = 0
    question_data = quiz_questions[0]
    send_quiz(message.chat.id, question_data, user_id)

def send_quiz(chat_id, question_data, user_id):
    # Send poll in QUIZ mode (without inline buttons)
    msg = bot.send_poll(
        chat_id=chat_id,
        question=question_data["question"],
        options=question_data["options"],
        is_anonymous=False,
        type='quiz',
        correct_option_id=question_data["correct_option_id"],
        open_period=60  # Poll open period in seconds
    )
    # Save information about the active quiz (poll_id)
    active_quizzes[msg.poll.id] = (user_id, chat_id, current_quiz_index[user_id])

# Handler for poll answers (PollAnswer)
@bot.poll_answer_handler()
def handle_poll_answer(poll_answer):
    poll_id = poll_answer.poll_id
    user_id = poll_answer.user.id
    if poll_id not in active_quizzes:
        return  # This poll is not being tracked

    stored_user_id, chat_id, question_index = active_quizzes[poll_id]
    # If the poll does not belong to this user, ignore
    if stored_user_id != user_id:
        return

    question_data = quiz_questions[question_index]
    # If the correct option is selected:
    if poll_answer.option_ids and poll_answer.option_ids[0] == question_data["correct_option_id"]:
        del active_quizzes[poll_id]  # Delete information about this poll
    else:
        # If incorrect, send explanation
        explanation = question_data.get("explanation", "–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç.")
        bot.send_message(chat_id=chat_id, text=explanation)
        del active_quizzes[poll_id]

    # Move to the next question (regardless of the correctness of the answer)
    current_quiz_index[user_id] = question_index + 1
    if current_quiz_index[user_id] < len(quiz_questions):
        next_question_data = quiz_questions[current_quiz_index[user_id]]
        msg = bot.send_poll(
            chat_id=chat_id,
            question=next_question_data["question"],
            options=next_question_data["options"],
            is_anonymous=False,
            type='quiz',
            correct_option_id=next_question_data["correct_option_id"],
            open_period=60  # Poll open period in seconds
        )
        active_quizzes[msg.poll.id] = (user_id, chat_id, current_quiz_index[user_id])
    else:
        bot.send_message(chat_id=chat_id, text="–ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!")
        del current_quiz_index[user_id]

@bot.message_handler(func=lambda message: message.text == "–ü–æ–º–æ—â—å")
def help_command(message):
    register_user(message.chat.id)
    bot.send_message(message.chat.id, "–≠—Ç–æ –ø–æ–º–æ—â—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏: '–ù–∞—á–∞—Ç—å —É—Ä–æ–∫', '–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫', '–ù–∞—á–∞—Ç—å –∫–≤–∏–∑'.")

# Handler for text messages ‚Äì registers the user and selects an action
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    register_user(message.chat.id)
    text = message.text.strip().lower()
    if text == "–Ω–∞—á–∞—Ç—å —É—Ä–æ–∫":
        start_lesson(message)
    elif text == "—Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫":
        next_lesson(message)
    elif text == "–Ω–∞—á–∞—Ç—å –∫–≤–∏–∑":
        start_quiz(message)
    elif text == "–ø–æ–º–æ—â—å":
        help_command(message)
    else:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")

# Function to send a random lesson to a specific chat (for daily mailing)
def send_random_lesson(chat_id):
    lesson_index = random.randint(0, len(lessons) - 1)
    bot.send_message(chat_id, lessons[lesson_index])

# Function that sends a random lesson to all subscribed users daily at 22:20 (Moscow time)
def send_daily_lesson():
    for chat_id in subscribed_users:
        try:
            send_random_lesson(chat_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É—Ä–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")

# Schedule the daily lesson sending
msk_time = dtime(hour=22, minute=20, tzinfo=ZoneInfo("Europe/Moscow"))
scheduler.add_job(send_daily_lesson, 'cron', hour=msk_time.hour, minute=msk_time.minute, timezone=msk_time.tzinfo)
scheduler.start()

# Inline query handler
@bot.inline_handler(lambda query: True)
def query_text(inline_query):
    try:
        lesson_index = random.randint(0, len(lessons) - 1)
        lesson_text = lessons[lesson_index]
        r = types.InlineQueryResultArticle(
            id='1', title="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É—Ä–æ–∫",
            input_message_content=types.InputTextMessageContent(message_text=lesson_text)
        )
        bot.answer_inline_query(inline_query.id, [r], cache_time=1)
    except Exception as e:
        print(f"Error handling inline query: {e}")

if __name__ == "__main__":
    bot.polling(none_stop=True)
