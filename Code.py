import os
import json
import random
from datetime import time as dtime
from zoneinfo import ZoneInfo
from random import shuffle
from telebot import TeleBot, types
from telebot.types import InlineQueryResultArticle, InputTextMessageContent, InputInvoiceMessageContent, ReplyKeyboardMarkup
from apscheduler.schedulers.background import BackgroundScheduler
import pandas as pd
import re
import string

API_TOKEN = 'token' #Insert your folder location here
VOICE_LESSONS_PATH = 'voice_lessons' #Insert your folder location here
SUBSCRIBED_USERS_FILE = "subscribed_users.json"
WORDS_BASE_PATH = "Word_base.Komi.xlsx" #Insert your file location here
SCORES_FILE = "scores.json"

bot = TeleBot(API_TOKEN)
scheduler = BackgroundScheduler()
df_words = pd.read_excel(WORDS_BASE_PATH)

current_lesson_index = {}
current_quiz_index = {}
active_quizzes = {}
dictant_state = {}
scramble_state = {}

try:
    with open(SCORES_FILE, 'r') as f:
        user_scores = json.load(f)
except:
    user_scores = {}

def save_scores():
    with open(SCORES_FILE, 'w') as f:
        json.dump(user_scores, f)

def add_score(user_id, amount):
    user_id_str = str(user_id)
    user_scores[user_id_str] = user_scores.get(user_id_str, 0) + amount
    save_scores()

def get_username(user):
    if user.username:
        return f"@{user.username}"
    else:
        return f"{user.first_name}" if user.first_name else f"ID:{user.id}"

def pluralize_points(n):
    n = abs(int(n))
    if 10 < n % 100 < 20:
        return "–æ—á–∫–æ–≤"
    elif n % 10 == 1:
        return "–æ—á–∫–æ"
    elif 2 <= n % 10 <= 4:
        return "–æ—á–∫–∞"
    else:
        return "–æ—á–∫–æ–≤"

@bot.message_handler(commands=['rating'])
@bot.message_handler(func=lambda m: m.text == "üìä –†–µ–π—Ç–∏–Ω–≥")
def handle_rating_button(message):
    show_rating(message)
def show_rating(message):
    if not user_scores:
        bot.send_message(message.chat.id, "–†–µ–π—Ç–∏–Ω–≥ –ø–æ–∫–∞ –ø—É—Å—Ç. –ë—É–¥—å –ø–µ—Ä–≤—ã–º!")
        return

    sorted_scores = sorted(user_scores.items(), key=lambda x: x[1], reverse=True)
    user_id_str = str(message.from_user.id)

    text = "üèÜ –¢–æ–ø 20 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ—á–∫–∞–º:\n"
    found = False

    for i, (uid, score) in enumerate(sorted_scores[:20], 1):
        try:
            user = bot.get_chat(uid)
            name = get_username(user)
        except:
            name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid}"
        if uid == user_id_str:
            found = True
            text += f"{i}. {name}: {score} {pluralize_points(score)} üëà (—ç—Ç–æ –≤—ã)\n"
        else:
            text += f"{i}. {name}: {score} {pluralize_points(score)}\n"

    # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ —Ç–æ–ø-20, –ø–æ–∫–∞–∂–∏ –µ–≥–æ –ø–æ–∑–∏—Ü–∏—é –æ—Ç–¥–µ–ª—å–Ω–æ
    if not found and user_id_str in user_scores:
        for i, (uid, score) in enumerate(sorted_scores, 1):
            if uid == user_id_str:
                name = get_username(message.from_user)
                text += f"\nüîª –í—ã –Ω–∞ {i} –º–µ—Å—Ç–µ —Å {score} {pluralize_points(score)}."
                break

    bot.send_message(message.chat.id, text)


# Functions to save/load subscribed users
def load_subscribed_users() -> set:
    try:
        with open(SUBSCRIBED_USERS_FILE, "r") as f:
            users = json.load(f)
            return set(users)
    except (FileNotFoundError, json.JSONDecodeError):
        return set()

def save_subscribed_users(users: set):
    with open(SUBSCRIBED_USERS_FILE, "w") as f:
        json.dump(list(users), f)

# Global set of subscribed users (chat_id)
subscribed_users = load_subscribed_users()

# Function to register a user (called on any interaction)
def register_user(chat_id):
    if chat_id not in subscribed_users:
        subscribed_users.add(chat_id)
        save_subscribed_users(subscribed_users)

# Lessons (example)
lessons = [
    "–£—Ä–æ–∫ 1: üí°–í–µ–∂–ª–∏–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ.\n\n–§—Ä–∞–∑–∞: '–í–∏–¥–∑–∞ –æ–ª–∞–Ω–Ω—ã–¥!!' ‚Äî –æ–∑–Ω–∞—á–∞–µ—Ç '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!'.\n–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å —ç—Ç—É —Ñ—Ä–∞–∑—É!",
    "–£—Ä–æ–∫ 2: üëã–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ.\n\n–§—Ä–∞–∑–∞: '–ß–æ–ª”ß–º!' ‚Äî –æ–∑–Ω–∞—á–∞–µ—Ç '–ü—Ä–∏–≤–µ—Ç!'.\n–ó–∞–ø–æ–º–Ω–∏ —ç—Ç—É —Ñ—Ä–∞–∑—É!",
    "–£—Ä–æ–∫ 3: üè°–ì–æ—Å—Ç–µ–ø—Ä–∏–∏–º—Å—Ç–≤–æ.\n\n–§—Ä–∞–∑–∞: '–†–∞–¥–ø—ã—Ä—ã—Å—å –∫–æ—Ä–∞–º' ‚Äî –æ–∑–Ω–∞—á–∞–µ—Ç '–° —Ä–∞–¥–æ—Å—Ç—å—é –ø—Ä–∏–≥–ª–∞—à–∞–µ–º!'.\n–ü–æ–ø—Ä–æ–±—É–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ—ë –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏!",
    "–£—Ä–æ–∫ 4: ‚ùì–í–æ–ø—Ä–æ—Å.\n\n–§—Ä–∞–∑–∞: '–ö—ã–¥–∑–∏ –æ–ª–∞–Ω?' ‚Äî –æ–∑–Ω–∞—á–∞–µ—Ç '–ö–∞–∫ –ø–æ–∂–∏–≤–∞–µ—à—å?'.\n–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å —ç—Ç—É —Ñ—Ä–∞–∑—É!",
    "–£—Ä–æ–∫ 5: üôè–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å.\n\n–§—Ä–∞–∑–∞: '–ê—Ç—Ç—å”ß, –±—É—Ä–∞' ‚Äî –æ–∑–Ω–∞—á–∞—é—Ç '–°–ø–∞—Å–∏–±–æ, —Ö–æ—Ä–æ—à–æ'.\n–ó–∞–ø–æ–º–Ω–∏ —ç—Ç—É —Ñ—Ä–∞–∑—É!",
    "–£—Ä–æ–∫ 6: üÜí–≠–ø–∏—Ç–µ—Ç—ã.\n\n–°–ª–æ–≤–∞: '–®–∞–Ω—å, –±—É—Ä' ‚Äî –æ–∑–Ω–∞—á–∞–µ—Ç '–î–æ–±—Ä—ã–π, —Ö–æ—Ä–æ—à–∏–π'.\n–ü–æ–ø—Ä–æ–±—É–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏!",
    "–£—Ä–æ–∫ 7: üå†–ü–æ–∂–µ–ª–∞–Ω–∏–µ.\n\n–§—Ä–∞–∑–∞: '–°—Ç–∞–≤ –±—É—Ä—Å”ß!' ‚Äî –æ–∑–Ω–∞—á–∞–µ—Ç '–í—Å–µ–≥–æ —Ö–æ—Ä–æ—à–µ–≥–æ!!'.\n–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å —ç—Ç—É —Ñ—Ä–∞–∑—É!",
    "–£—Ä–æ–∫ 8: üó£–û–±—Ä–∞—â–µ–Ω–∏–µ.\n\n–§—Ä–∞–∑–∞: '–ü—ã–¥–¥–∏ –ø—É–∫—Ç–∞–Ω–∞ —ë—Ä—Ç—ä—è—Å!' ‚Äî –æ–∑–Ω–∞—á–∞–µ—Ç '–£–≤–∞–∂–∞–µ–º—ã–µ –¥—Ä—É–∑—å—è!'.\n–ó–∞–ø–æ–º–Ω–∏ —ç—Ç—É —Ñ—Ä–∞–∑—É!",
    "–£—Ä–æ–∫ 9: üéâ–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ.\n\n–§—Ä–∞–∑–∞: '–ß–æ–ª”ß–º–∞–ª–∞ —Ç—ç–Ω”ß!' ‚Äî –æ–∑–Ω–∞—á–∞–µ—Ç '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Ç–µ–±—è!'.\n–ü–æ–ø—Ä–æ–±—É–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ—ë –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏!",
    "–£—Ä–æ–∫ 10: üìõ–ò–º—è.\n\n–í–æ–ø—Ä–æ—Å: '–ö—ã–¥–∑–∏ —Ç—ç–Ω–∞–¥ –Ω–∏–º—ã–¥?' ‚Äî –æ–∑–Ω–∞—á–∞–µ—Ç '–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?!'.\n–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å!",
    "–£—Ä–æ–∫ 11: üíÅ‚Äç‚ôÇÔ∏è–ü–æ–º–æ—â—å.\n\n–í–æ–ø—Ä–æ—Å: '–û—Ç—Å—ã—à—Ç–Ω—ã –≤–µ—Ä–º–∞ –æ–≥?!' ‚Äî –æ–∑–Ω–∞—á–∞–µ—Ç '–ú–æ–≥—É –ª–∏ —è –ø–æ–º–æ—á—å?!'.\n–ó–∞–ø–æ–º–Ω–∏ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å!",
    "–£—Ä–æ–∫ 12: üìñ–£—á—ë–±–∞.\n\n–§—Ä–∞–∑–∞: '–ö–æ–º–∏ –∫—ã–≤ –≤–µ–ª”ß–¥–∞' ‚Äî –æ–∑–Ω–∞—á–∞–µ—Ç '–£—á—É –∫–æ–º–∏ —è–∑—ã–∫'.\n–ó–∞–ø–æ–º–Ω–∏ —ç—Ç—É —Ñ—Ä–∞–∑—É!",
    "–£—Ä–æ–∫ 13: üë®‚Äçüéì–û—Å–Ω–æ–≤—ã –∫–æ–º–∏ —è–∑—ã–∫–∞.\n\n–í–æ–ø—Ä–æ—Å: '–ö—É—Ç—à”ß–º –ª—É–Ω”ß –∫–æ–º–∏ –∫—ã–≤–π—ã—Å—å —ç–∫–∑–∞–º–µ–Ω?' ‚Äî –æ–∑–Ω–∞—á–∞–µ—Ç '–í –∫–∞–∫–æ–π –¥–µ–Ω—å –ø–æ –∫–æ–º–∏ —è–∑—ã–∫—É —ç–∫–∑–∞–º–µ–Ω?!'.\n–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å!",
    "–£—Ä–æ–∫ 14: üò¥–§—Ä–∞–∑–∞ –∫–æ —Å–Ω—É.\n\n–§—Ä–∞–∑–∞: '–ë—É—Ä –≤–æ–π!' ‚Äî –æ–∑–Ω–∞—á–∞–µ—Ç '–î–æ–±—Ä–æ–π –Ω–æ—á–∏!'.\n–ó–∞–ø–æ–º–Ω–∏ —ç—Ç—É —Ñ—Ä–∞–∑—É!",
    "–£—Ä–æ–∫ 15: üëã–ü—Ä–æ—â–∞–Ω–∏–µ.\n\n–§—Ä–∞–∑–∞: '–ê–¥–¥–∑—ã—Å—å–ª—ã—Ç”ß–¥–∑!' ‚Äî –æ–∑–Ω–∞—á–∞–µ—Ç '–î–æ –≤—Å—Ç—Ä–µ—á–∏! –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!'.\n–ü–æ–ø—Ä–æ–±—É–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ—ë –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏!",
    "–£—Ä–æ–∫ 16: üëã –ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ.\n\n–§—Ä–∞–∑–∞: '–í–∏–¥–∑–∞ –æ–ª–∞–Ω!' ‚Äî –æ–∑–Ω–∞—á–∞–µ—Ç '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π!'.\n–ó–∞–ø–æ–º–Ω–∏ —ç—Ç—É —Ñ—Ä–∞–∑—É!",
    "–£—Ä–æ–∫ 17: üö™ –ì–æ—Å—Ç–µ–ø—Ä–∏–∏–º—Å—Ç–≤–æ.\n\n–§—Ä–∞–∑–∞: '–í–∏–¥–∑–∞ –∫–æ—Ä–∞–º!' ‚Äî –æ–∑–Ω–∞—á–∞–µ—Ç '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!'.\n–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å —ç—Ç—É —Ñ—Ä–∞–∑—É!",
    "–£—Ä–æ–∫ 18: üßë –ñ–∏–∑–Ω—å.\n\n–°–ª–æ–≤–æ: '–û–ª–∞–Ω' ‚Äî –æ–∑–Ω–∞—á–∞–µ—Ç '–ñ–∏–≤—ë—à—å'.\n–ó–∞–ø–æ–º–Ω–∏ —ç—Ç–æ —Å–ª–æ–≤–æ!",
    "–£—Ä–æ–∫ 19: üôè –ü—Ä–æ—Å—Ç–æ–µ —Å–ø–∞—Å–∏–±–æ.\n\n–°–ª–æ–≤–æ: '–ê—Ç—Ç—å”ß' ‚Äî –æ–∑–Ω–∞—á–∞–µ—Ç '–°–ø–∞—Å–∏–±–æ'.\n–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å —ç—Ç–æ —Å–ª–æ–≤–æ!",
    "–£—Ä–æ–∫ 20: üëç –û–¥–æ–±—Ä–µ–Ω–∏–µ.\n\n–°–ª–æ–≤–æ: '–õ”ß—Å—å—ã–¥–∞' ‚Äî –æ–∑–Ω–∞—á–∞–µ—Ç '–•–æ—Ä–æ—à–æ'.\n–ó–∞–ø–æ–º–Ω–∏ —ç—Ç–æ —Å–ª–æ–≤–æ!",
    "–£—Ä–æ–∫ 21: üôè –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å.\n\n–§—Ä–∞–∑–∞: '–ê—Ç—Ç—å”ß, —à–æ–≥–º–∞–Ω–∞' ‚Äî –æ–∑–Ω–∞—á–∞–µ—Ç '–°–ø–∞—Å–∏–±–æ, –Ω–æ—Ä–º–∞–ª—å–Ω–æ'.\n–ó–∞–ø–æ–º–Ω–∏ —ç—Ç—É —Ñ—Ä–∞–∑—É!",
    "–£—Ä–æ–∫ 22: üòä –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç.\n\n–°–ª–æ–≤–æ: '–®–æ–≥–º–∞–Ω–∞' ‚Äî –æ–∑–Ω–∞—á–∞–µ—Ç '–ù–æ—Ä–º–∞–ª—å–Ω–æ'.\n–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å —ç—Ç–æ —Å–ª–æ–≤–æ!",
    "–£—Ä–æ–∫ 23: üòÅ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ.\n\n–°–ª–æ–≤–æ: '–®—É–¥–∞' ‚Äî –æ–∑–Ω–∞—á–∞–µ—Ç '–°—á–∞—Å—Ç–ª–∏–≤—ã–π'.\n–ó–∞–ø–æ–º–Ω–∏ —ç—Ç–æ —Å–ª–æ–≤–æ!",
    "–£—Ä–æ–∫ 24: üõ£ –î–æ—Ä–æ–≥–∞.\n\n–°–ª–æ–≤–æ: '–¢—É–π' ‚Äî –æ–∑–Ω–∞—á–∞–µ—Ç '–î–æ—Ä–æ–≥–∞'.\n–ó–∞–ø–æ–º–Ω–∏ —ç—Ç–æ —Å–ª–æ–≤–æ!",
    "–£—Ä–æ–∫ 25: üôè –ë—ã—Ç—å.\n\n–°–ª–æ–≤–æ: '–õ–æ–Ω—ã' ‚Äî –æ–∑–Ω–∞—á–∞–µ—Ç '–ë—ã—Ç—å'.\n–ó–∞–ø–æ–º–Ω–∏ —ç—Ç–æ —Å–ª–æ–≤–æ!",
    "–£—Ä–æ–∫ 26: üåÖ –î–æ –∑–∞–≤—Ç—Ä–∞.\n\n–§—Ä–∞–∑–∞: '–ê—Å–∫–∏”ß–¥–∑!' ‚Äî –æ–∑–Ω–∞—á–∞–µ—Ç '–î–æ –∑–∞–≤—Ç—Ä–∞!'.\n–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å —ç—Ç—É —Ñ—Ä–∞–∑—É!",
    "–£—Ä–æ–∫ 27: üò¥ –ü–æ–∂–µ–ª–∞–Ω–∏–µ –Ω–∞ —Å–æ–Ω.\n\n–§—Ä–∞–∑–∞: '–ë—É—Ä–∞ —É–∑—å–Ω—ã! –ß”ß—Å–∫—ã–¥ —É–Ω!' ‚Äî –æ–∑–Ω–∞—á–∞–µ—Ç '–•–æ—Ä–æ—à–µ–≥–æ —Å–Ω–∞! –ü—Ä–∏—è—Ç–Ω—ã—Ö —Å–Ω–æ–≤!'.\n–ó–∞–ø–æ–º–Ω–∏ —ç—Ç—É —Ñ—Ä–∞–∑—É!",
    "–£—Ä–æ–∫ 28: üìÜ –í—Ä–µ–º—è.\n\n–°–ª–æ–≤–æ: '–õ—É–Ω' ‚Äî –æ–∑–Ω–∞—á–∞–µ—Ç '–î–µ–Ω—å'.\n–ó–∞–ø–æ–º–Ω–∏ —ç—Ç–æ —Å–ª–æ–≤–æ!",
    "–£—Ä–æ–∫ 29: üöó –ü–æ–∂–µ–ª–∞–Ω–∏–µ –Ω–∞ –¥–æ—Ä–æ–≥—É.\n\n–§—Ä–∞–∑–∞: '–®—É–¥–∞ —Ç—É–π!' ‚Äî –æ–∑–Ω–∞—á–∞–µ—Ç '–°—á–∞—Å—Ç–ª–∏–≤–æ–≥–æ –ø—É—Ç–∏!'.\n–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å —ç—Ç—É —Ñ—Ä–∞–∑—É!",
    "–£—Ä–æ–∫ 30: üò¢ –°–∫—É—á–∞–Ω–∏–µ.\n\n–§—Ä–∞–∑–∞: '–ì–∞–∂—Ç”ß–º—Ç—á–∞!' ‚Äî –æ–∑–Ω–∞—á–∞–µ—Ç '–°–∫—É—á–∞—é!'.\n–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å —ç—Ç—É —Ñ—Ä–∞–∑—É!",
    "–£—Ä–æ–∫ 31: ‚úçÔ∏è –û–±—Ä–∞—â–µ–Ω–∏–µ.\n\n–°–ª–æ–≤–æ: '–ì–∏–∂!' ‚Äî –æ–∑–Ω–∞—á–∞–µ—Ç '–ü–∏—à–∏!'.\n–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å —ç—Ç–æ —Å–ª–æ–≤–æ!",
    "–£—Ä–æ–∫ 32: üìû –°–≤—è–∑—å.\n\n–°–ª–æ–≤–æ: '–¢—Ä–∏–Ω—å”ß–±—Ç—ã!' ‚Äî –æ–∑–Ω–∞—á–∞–µ—Ç '–ó–≤–æ–Ω–∏!'.\n–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å —ç—Ç–æ —Å–ª–æ–≤–æ!",
    "–£—Ä–æ–∫ 33: üíå –õ–∞—Å–∫–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ.\n\n–°–ª–æ–≤–æ: '–î–æ–Ω–∞' ‚Äî –æ–∑–Ω–∞—á–∞–µ—Ç '–î–æ—Ä–æ–≥–æ–π'.\n–ó–∞–ø–æ–º–Ω–∏ —ç—Ç–æ —Å–ª–æ–≤–æ!",
    "–£—Ä–æ–∫ 34: üíå –õ–∞—Å–∫–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ (–º–æ–π).\n\n–§—Ä–∞–∑–∞: '–î–æ–Ω–∞”ß–π!' ‚Äî –æ–∑–Ω–∞—á–∞–µ—Ç '–î–æ—Ä–æ–≥–æ–π –º–æ–π!'.\n–ü–æ–ø—Ä–æ–±—É–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ—ë –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏!",
    "–£—Ä–æ–∫ 35: üíñ –ú–∏–ª—ã–π.\n\n–§—Ä–∞–∑–∞: '–ú—É—Å–∞”ß–π!' ‚Äî –æ–∑–Ω–∞—á–∞–µ—Ç '–ú–∏–ª—ã–π –º–æ–π!'.\n–ó–∞–ø–æ–º–Ω–∏ —ç—Ç—É —Ñ—Ä–∞–∑—É!",
    "–£—Ä–æ–∫ 36: üë¨ –î—Ä—É–∂–±–∞.\n\n–§—Ä–∞–∑–∞: '–Å—Ä—Ç”ß–π!' ‚Äî –æ–∑–Ω–∞—á–∞–µ—Ç '–î—Ä—É–≥ –º–æ–π!'.\n–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å —ç—Ç—É —Ñ—Ä–∞–∑—É!",
    "–£—Ä–æ–∫ 37: üë® –ß–µ–ª–æ–≤–µ–∫.\n\n–§—Ä–∞–∑–∞: '–ë—É—Ä –º–æ—Ä—Ç!' ‚Äî –æ–∑–Ω–∞—á–∞–µ—Ç '–•–æ—Ä–æ—à–∏–π(-–∞—è)!'.\n–ó–∞–ø–æ–º–Ω–∏ —ç—Ç—É —Ñ—Ä–∞–∑—É!",
]

def normalize_phrase(text):
    table = str.maketrans('', '', string.punctuation + '¬´¬ª‚Äî‚Ä¶‚Äì‚Äê‚Äë‚Äú‚Äù‚Äô‚Äò!?.,:;‚Äì‚Äî()[]{}"\'')
    return text.lower().translate(table).replace("—ë", "–µ").replace(" ", "").strip()

# –ü–æ–ª—É—á–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∏-—Ñ—Ä–∞–∑—ã –∏–∑ lessons
existing_phrases_normalized = set()
for lesson in lessons:
    match = re.search(r"[\"'](.+?)[\"']", lesson)
    if match:
        phrase = normalize_phrase(match.group(1))
        existing_phrases_normalized.add(phrase)

# –ê–≤—Ç–æ—É—Ä–æ–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∞–±–ª–∏—Ü—ã, –∏—Å–∫–ª—é—á–∞—è —É–∂–µ –≤—Å—Ç—Ä–µ—á–∞–≤—à–∏–µ—Å—è —Ñ—Ä–∞–∑—ã
auto_lessons = []
lesson_counter = len(lessons) + 1

for _, row in df_words.iterrows():
    komi = str(row.get("value", "")).strip()
    ru = str(row.get("translate_ru", "")).strip()

    if komi and ru and normalize_phrase(komi) not in existing_phrases_normalized:
        auto_lessons.append(
            f"–£—Ä–æ–∫ {lesson_counter}:\n\n–§—Ä–∞–∑–∞: '{komi}' ‚Äî –æ–∑–Ω–∞—á–∞–µ—Ç '{ru}'.\n–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å —ç—Ç—É —Ñ—Ä–∞–∑—É!"
        )
        lesson_counter += 1

lessons += auto_lessons

@bot.message_handler(commands=['lesson'])
def send_specific_lesson(message):
    register_user(message.chat.id)
    try:
        command_parts = message.text.strip().split()
        if len(command_parts) != 2:
            raise ValueError("–§–æ—Ä–º–∞—Ç: /lesson –Ω–æ–º–µ—Ä")
        number = int(command_parts[1])
        if 1 <= number <= len(lessons):
            send_lesson_with_voice(message.chat.id, number - 1)
        else:
            bot.send_message(message.chat.id, f"–£—Ä–æ–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º {number} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í—Å–µ–≥–æ —É—Ä–æ–∫–æ–≤: {len(lessons)}.")
    except Exception as e:
        bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /lesson 5")


# Quiz questions with added "explanation" field
quiz_questions = [
    {
        "question": "–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è '–ß–æ–ª”ß–º!'?",
        "options": ["–°–ø–∞—Å–∏–±–æ", "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è", "–ü—Ä–∏–≤–µ—Ç", "–ì–æ–¥"],
        "correct_option_id": 2,
        "explanation": "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: –ü—Ä–∏–≤–µ—Ç. '–ß–æ–ª”ß–º!' ‚Äî —ç—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ."
    },
    {
        "question": "–ö–∞–∫ –ø–æ-–∫–æ–º–∏ –±—É–¥–µ—Ç '–°–ø–∞—Å–∏–±–æ'?",
        "options": ["–ë—É—Ä–∞", "–ê—Ç—Ç—å”ß", "–°—Ç–∞–≤", "–®–æ–≥–º–∞–Ω–∞"],
        "correct_option_id": 1,
        "explanation": "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: –ê—Ç—Ç—å”ß."
    },
    {
        "question": "–ß—Ç–æ –∑–Ω–∞—á–∏—Ç '–í–∏–¥–∑–∞ –∫–æ—Ä–∞–º!'?",
        "options": ["–° –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è!", "–°–ø–∞—Å–∏–±–æ!", "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", "–î–æ –∑–∞–≤—Ç—Ä–∞!"],
        "correct_option_id": 2,
        "explanation": "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!."
    },
    {
        "question": "–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è '–†–∞–¥–ø—ã—Ä—ã—Å—å –∫–æ—Ä–∞–º!'?",
        "options": ["–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!", "–î–æ–±—Ä—ã–π –ø—É—Ç—å!", "–° —Ä–∞–¥–æ—Å—Ç—å—é –ø—Ä–∏–≥–ª–∞—à–∞–µ–º!", "–ñ–∏–≤—ë—à—å!"],
        "correct_option_id": 2,
        "explanation": "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: –° —Ä–∞–¥–æ—Å—Ç—å—é –ø—Ä–∏–≥–ª–∞—à–∞–µ–º!"
    },
    {
        "question": "–ß—Ç–æ –∑–Ω–∞—á–∏—Ç '–ë—É—Ä –≤–æ–π!'?",
        "options": ["–î–æ–±—Ä—ã–π –¥–µ–Ω—å!", "–î–æ–±—Ä–æ–π –Ω–æ—á–∏!", "–ü–∏—à–∏!", "–î–æ –≤—Å—Ç—Ä–µ—á–∏!"],
        "correct_option_id": 1,
        "explanation": "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: –î–æ–±—Ä–æ–π –Ω–æ—á–∏!"
    },
    {
        "question": "–ß—Ç–æ –ø–æ-–∫–æ–º–∏ –æ–∑–Ω–∞—á–∞–µ—Ç '–ö—ã–¥–∑–∏ –æ–ª–∞–Ω?'",
        "options": ["–ö–∞–∫ –¥–µ–ª–∞?", "–ì–¥–µ –∂–∏–≤—ë—à—å?", "–ß—Ç–æ –¥–µ–ª–∞–µ—à—å?", "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?"],
        "correct_option_id": 0,
        "explanation": "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: –ö–∞–∫ –¥–µ–ª–∞? (–ö–∞–∫ –ø–æ–∂–∏–≤–∞–µ—à—å?)"
    },
    {
        "question": "–ö–∞–∫ —Å–∫–∞–∑–∞—Ç—å –ø–æ-–∫–æ–º–∏ '–î–æ –≤—Å—Ç—Ä–µ—á–∏!'?",
        "options": ["–ê–¥–¥–∑—ã—Å—å–ª—ã—Ç”ß–¥–∑!", "–¢—Ä–∏–Ω—å”ß–±—Ç—ã!", "–®—É–¥–∞ —Ç—É–π!", "–ì–∏–∂!"],
        "correct_option_id": 0,
        "explanation": "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: –ê–¥–¥–∑—ã—Å—å–ª—ã—Ç”ß–¥–∑!"
    },
    {
        "question": "–ß—Ç–æ –ø–æ-–∫–æ–º–∏ '–ó–≤–æ–Ω–∏!'?",
        "options": ["–ì–∏–∂!", "–¢—Ä–∏–Ω—å”ß–±—Ç—ã!", "–®—É–¥–∞ —Ç—É–π!", "–í–∏–¥–∑–∞ –ª–æ!"],
        "correct_option_id": 1,
        "explanation": "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: –¢—Ä–∏–Ω—å”ß–±—Ç—ã!"
    },
    {
        "question": "–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è '–®—É–¥–∞'?",
        "options": ["–î–æ–±—Ä—ã–π", "–°—á–∞—Å—Ç–ª–∏–≤—ã–π", "–ì–æ–¥", "–î—Ä—É–≥"],
        "correct_option_id": 1,
        "explanation": "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: –°—á–∞—Å—Ç–ª–∏–≤—ã–π."
    },
    {
        "question": "–ß—Ç–æ –∑–Ω–∞—á–∏—Ç '–î–æ–Ω–∞”ß–π!'?",
        "options": ["–ú—É–∂—á–∏–Ω–∞!", "–î–æ—Ä–æ–≥–æ–π –º–æ–π!", "–°—ã–Ω–æ–∫!", "–°–ø–∞—Å–∏–±–æ!"],
        "correct_option_id": 1,
        "explanation": "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: –î–æ—Ä–æ–≥–æ–π –º–æ–π!"
    },
    {
        "question": "–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è '–ì–∞–∂—Ç”ß–º—Ç—á–∞!'?",
        "options": ["–°–∫—É—á–∞—é!", "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!", "–î–µ–≤—É—à–∫–∞!", "–î–æ –∑–∞–≤—Ç—Ä–∞!"],
        "correct_option_id": 0,
        "explanation": "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: –°–∫—É—á–∞—é!"
    },
    {
        "question": "–ß—Ç–æ –ø–æ-–∫–æ–º–∏ '–î–µ—Ç–∏!'?",
        "options": ["–ß–µ–ª—è–¥—å!", "–ü–∏—É–∫”ß–π!", "–ù—ã–ª—É–∫”ß–π!", "–Å—Ä—Ç—ä—è—Å!"],
        "correct_option_id": 0,
        "explanation": "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: –ß–µ–ª—è–¥—å!"
    },
    {
        "question": "–ö–∞–∫ –±—É–¥–µ—Ç –ø–æ-–∫–æ–º–∏ '–ì–æ–¥'?",
        "options": ["–í—ã–ª—å", "–í–æ", "–í–æ–∞—Å", "–õ–æ"],
        "correct_option_id": 1,
        "explanation": "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: –í–æ."
    },
    {
        "question": "–ß—Ç–æ –ø–æ-–∫–æ–º–∏ '–ü–∏—à–∏!'?",
        "options": ["–ì–∏–∂!", "–¢—Ä–∏–Ω—å”ß–±—Ç—ã!", "–ù—ã–ª–∞–Ω”ß–π!", "–í–æ!"],
        "correct_option_id": 0,
        "explanation": "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: –ì–∏–∂!"
    },
    {
        "question": "–ö–∞–∫ —Å–∫–∞–∑–∞—Ç—å '–°–ø–∞—Å–∏–±–æ, —Ö–æ—Ä–æ—à–æ' –ø–æ-–∫–æ–º–∏?",
        "options": ["–ê—Ç—Ç—å”ß, –±—É—Ä–∞", "–í–∏–¥–∑–∞ –æ–ª–∞–Ω–Ω—ã–¥", "–ë—É—Ä –≤–æ–π", "–°—Ç–∞–≤ –±—É—Ä—Å”ß"],
        "correct_option_id": 0,
        "explanation": "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: –ê—Ç—Ç—å”ß, –±—É—Ä–∞"
    },
    {
        "question": "–ß—Ç–æ –∑–Ω–∞—á–∏—Ç –ø–æ-–∫–æ–º–∏ '–®–æ–≥–º–∞–Ω–∞'?",
        "options": ["–ù–æ—Ä–º–∞–ª—å–Ω–æ", "–î–æ–±—Ä—ã–π", "–ü–∏—à–∏!", "–°–ø–∞—Å–∏–±–æ"],
        "correct_option_id": 0,
        "explanation": "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: –ù–æ—Ä–º–∞–ª—å–Ω–æ."
    },
    {
        "question": "–ö–∞–∫ –±—É–¥–µ—Ç '–°—á–∞—Å—Ç–ª–∏–≤–æ–≥–æ –ø—É—Ç–∏!' –Ω–∞ –∫–æ–º–∏?",
        "options": ["–®—É–¥–∞ —Ç—É–π!", "–í–∏–¥–∑–∞ –æ–ª–∞–Ω–Ω—ã–¥!", "–ì–∞–∂—Ç”ß–º—Ç—á–∞!", "–ê–¥–¥–∑—ã—Å—å–ª—ã—Ç”ß–¥–∑!"],
        "correct_option_id": 0,
        "explanation": "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: –®—É–¥–∞ —Ç—É–π!"
    },
    {
        "question": "–ß—Ç–æ –ø–æ-–∫–æ–º–∏ –æ–∑–Ω–∞—á–∞–µ—Ç '–ë—É—Ä–∞ —É–∑—å–Ω—ã! –ß”ß—Å–∫—ã–¥ —É–Ω!'?",
        "options": ["–î–æ –≤—Å—Ç—Ä–µ—á–∏!", "–•–æ—Ä–æ—à–µ–≥–æ —Å–Ω–∞! –ü—Ä–∏—è—Ç–Ω—ã—Ö —Å–Ω–æ–≤!", "–ü–∏—à–∏!", "–î–æ –∑–∞–≤—Ç—Ä–∞!"],
        "correct_option_id": 1,
        "explanation": "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: –•–æ—Ä–æ—à–µ–≥–æ —Å–Ω–∞! –ü—Ä–∏—è—Ç–Ω—ã—Ö —Å–Ω–æ–≤!"
    },
    {
        "question": "–ö–∞–∫ –ø–æ-–∫–æ–º–∏ —Å–∫–∞–∑–∞—Ç—å '–î–µ–≤—É—à–∫–∞!'?",
        "options": ["–ü–∏—É–∫”ß–π!", "–ù—ã–ª–∞–Ω”ß–π!", "–î–æ–Ω–∞”ß–π!", "–Å—Ä—Ç”ß–π!"],
        "correct_option_id": 1,
        "explanation": "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: –ù—ã–ª–∞–Ω”ß–π!"
    },
    {
        "question": "–ß—Ç–æ –∑–Ω–∞—á–∏—Ç '–ü—ã–¥–¥–∏ –ø—É–∫—Ç–∞–Ω–∞ —ë—Ä—Ç—ä—è—Å!'?",
        "options": ["–ü–∏—à–∏ –¥—Ä—É–∑—å—è–º!", "–£–≤–∞–∂–∞–µ–º—ã–µ –¥—Ä—É–∑—å—è!", "–î—Ä—É–≥ –º–æ–π!", "–î–µ—Ç–∏!"],
        "correct_option_id": 1,
        "explanation": "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: –£–≤–∞–∂–∞–µ–º—ã–µ –¥—Ä—É–∑—å—è!"
    },
    {
        "question": "–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è '–ú—É—Å–∞”ß–π!'?",
        "options": ["–ú–∏–ª—ã–π –º–æ–π!", "–î–æ—Ä–æ–≥–æ–π!", "–ì–æ–¥!", "–î–æ—Ä–æ–≥–∞!"],
        "correct_option_id": 0,
        "explanation": "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: –ú–∏–ª—ã–π –º–æ–π!"
    },
    {
        "question": "–ß—Ç–æ –∑–Ω–∞—á–∏—Ç –ø–æ-–∫–æ–º–∏ '–ë—É—Ä –º–æ—Ä—Ç!'?",
        "options": ["–î–æ—Ä–æ–≥–æ–π –º–æ–π!", "–ú—É–∂—á–∏–Ω–∞!", "–î—Ä—É–≥ –º–æ–π!", "–ü–∏—à–∏!"],
        "correct_option_id": 1,
        "explanation": "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: –ú—É–∂—á–∏–Ω–∞!"
    },
    {
        "question": "–ö–∞–∫ –±—É–¥–µ—Ç –ø–æ-–∫–æ–º–∏ '–î—Ä—É–≥ –º–æ–π!'?",
        "options": ["–Å—Ä—Ç”ß–π!", "–ü–∏—É–∫”ß–π!", "–î–æ–Ω–∞”ß–π!", "–ê–¥–¥–∑—ã—Å—å–ª—ã—Ç”ß–¥–∑!"],
        "correct_option_id": 0,
        "explanation": "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: –Å—Ä—Ç”ß–π!"
    },
    {
        "question": "–ß—Ç–æ –ø–æ-–∫–æ–º–∏ '–î–µ—Ç–∏!'?",
        "options": ["–Å—Ä—Ç—ä—è—Å!", "–ß–µ–ª—è–¥—å!", "–ê—Å–ª—ã–¥ –∞—Ç—Ç—å”ß!", "–¢–∞–π”ß –≤—ã–≤—Ç—ñ —ç—Ç—à–∞"],
        "correct_option_id": 1,
        "explanation": "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: –ß–µ–ª—è–¥—å!"
    },
    {
        "question": "–ß—Ç–æ –∑–Ω–∞—á–∏—Ç '–ê—Å–∫–∏”ß–¥–∑!'?",
        "options": ["–î–æ –≤—Å—Ç—Ä–µ—á–∏!", "–î–æ –∑–∞–≤—Ç—Ä–∞!", "–°–∫—É—á–∞—é!", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞!"],
        "correct_option_id": 1,
        "explanation": "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: –î–æ –∑–∞–≤—Ç—Ä–∞!"
    },
    {
        "question": "–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è '–ì–∏–∂!'?",
        "options": ["–ó–≤–æ–Ω–∏!", "–ü–∏—à–∏!", "–ñ–∏–≤—ë—à—å!", "–°–ø–∞—Å–∏–±–æ!"],
        "correct_option_id": 1,
        "explanation": "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: –ü–∏—à–∏!"
    },
    {
        "question": "–ß—Ç–æ –ø–æ-–∫–æ–º–∏ '–ì–æ–¥'?",
        "options": ["–≤–æ", "–ª–æ", "—Ç—É–π", "—à–æ–≥–º–∞–Ω–∞"],
        "correct_option_id": 0,
        "explanation": "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: –≤–æ."
    },
    {
        "question": "–ö–∞–∫ –±—É–¥–µ—Ç –ø–æ-–∫–æ–º–∏ '–î–æ—Ä–æ–≥–∞'?",
        "options": ["—Ç—É–π", "–≤–æ", "–ª–æ", "–ì–∏–∂!"],
        "correct_option_id": 0,
        "explanation": "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: —Ç—É–π."
    },
    {
        "question": "–ß—Ç–æ –∑–Ω–∞—á–∏—Ç '–®–∞–Ω—å, –±—É—Ä'?",
        "options": ["–°—á–∞—Å—Ç–ª–∏–≤—ã–π", "–ú–∏–ª—ã–π –º–æ–π", "–î–æ –≤—Å—Ç—Ä–µ—á–∏", "–•–æ—Ä–æ—à–∏–π, –¥–æ–±—Ä—ã–π"],
        "correct_option_id": 3,
        "explanation": "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: –•–æ—Ä–æ—à–∏–π, –¥–æ–±—Ä—ã–π."
    },
    {
        "question": "–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è '–í–∏–¥–∑–∞ –ª–æ!'?",
        "options": ["–°—á–∞—Å—Ç–ª–∏–≤–æ–≥–æ –ø—É—Ç–∏!", "–ë—É–¥—å –∑–¥–æ—Ä–æ–≤!", "–°–ø–∞—Å–∏–±–æ, —Ö–æ—Ä–æ—à–æ", "–î–æ –∑–∞–≤—Ç—Ä–∞!"],
        "correct_option_id": 1,
        "explanation": "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: –ë—É–¥—å –∑–¥–æ—Ä–æ–≤!"
    },
    {
        "question": "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç '–ö—É—Ç—à”ß–º –ª—É–Ω”ß –∫–æ–º–∏ –∫—ã–≤–π—ã—Å—å —ç–∫–∑–∞–º–µ–Ω?'?",
        "options": ["–ö–æ–≥–¥–∞ —ç–∫–∑–∞–º–µ–Ω –ø–æ –∫–æ–º–∏ —è–∑—ã–∫—É?", "–ö–∞–∫ –¥–µ–ª–∞?", "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!", "–°–ø–∞—Å–∏–±–æ!"],
        "correct_option_id": 0,
        "explanation": "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: –ö–æ–≥–¥–∞ —ç–∫–∑–∞–º–µ–Ω –ø–æ –∫–æ–º–∏ —è–∑—ã–∫—É?"
    },
    {
        "question": "–ö–∞–∫ –±—É–¥–µ—Ç '–î–æ –∑–∞–≤—Ç—Ä–∞!' –Ω–∞ –∫–æ–º–∏?",
        "options": ["–ê—Å–∫–∏”ß–¥–∑!", "–ê–¥–¥–∑—ã—Å—å–ª—ã—Ç”ß–¥–∑!", "–®—É–¥–∞ —Ç—É–π!", "–ë—É—Ä –≤–æ–π!"],
        "correct_option_id": 0,
        "explanation": "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: –ê—Å–∫–∏”ß–¥–∑!"
    },
]

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–≤–∏–∑—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
used_word_indices = set()
question_templates_ru_to_komi = [
    "–ö–∞–∫ –ø–æ-–∫–æ–º–∏ —Å–∫–∞–∑–∞—Ç—å: '{ru}'?",
    "–ö–∞–∫ –±—É–¥–µ—Ç –Ω–∞ –∫–æ–º–∏: '{ru}'?",
    "–ü–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ –∫–æ–º–∏: '{ru}'",
    "–ß—Ç–æ –Ω–∞ –∫–æ–º–∏ –æ–∑–Ω–∞—á–∞–µ—Ç —Ñ—Ä–∞–∑–∞: '{ru}'?",
    "–ö–∞–∫ –∑–≤—É—á–∏—Ç –ø–æ-–∫–æ–º–∏: '{ru}'?"
]

question_templates_komi_to_ru = [
    "–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å –∫–æ–º–∏: '{komi}'?",
    "–ß—Ç–æ –∑–Ω–∞—á–∏—Ç —Å–ª–æ–≤–æ '{komi}'?",
    "–ö–∞–∫ –ø–æ–Ω—è—Ç—å: '{komi}'?",
    "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç '{komi}'?",
    "–ö–∞–∫ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏: '{komi}'?"
]

def generate_auto_quiz():
    for idx, row in df_words.iterrows():
        if idx in used_word_indices:
            continue
        komi = str(row.get("value", "")).strip()
        ru = str(row.get("translate_ru", "")).strip()
        if not komi or not ru or ' ' in komi or ' ' in ru:
            continue

        used_word_indices.add(idx)
        if random.random() < 0.5:
            question = random.choice(question_templates_ru_to_komi).format(ru=ru)
            correct = komi
            options = [komi] + random.sample(
                [str(df_words.iloc[i]['value']) for i in random.sample(range(len(df_words)), 10)
                 if i != idx and isinstance(df_words.iloc[i]['value'], str)], 3)
        else:
            question = random.choice(question_templates_komi_to_ru).format(komi=komi)
            correct = ru
            options = [ru] + random.sample(
                [str(df_words.iloc[i]['translate_ru']) for i in random.sample(range(len(df_words)), 10)
                 if i != idx and isinstance(df_words.iloc[i]['translate_ru'], str)], 3)

        random.shuffle(options)
        correct_option_id = options.index(correct)

        quiz_questions.append({
            "question": question,
            "options": options,
            "correct_option_id": correct_option_id,
            "explanation": f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct}"
        })

random.seed(42)
generate_auto_quiz()

from random import shuffle

def is_single_word(word):
    word = str(word)
    word_clean = re.sub(r"[^\w”ß”±”ì”≠—ë√§√∂√º º'-]", '', word, flags=re.IGNORECASE)
    return ' ' not in word_clean and len(word_clean) > 0 and word_clean == word

filtered_words = [
    (re.sub(r"[^\w”ß”±”ì”≠—ë√§√∂√º º'-]", '', str(row['value'])), row['translate_ru'])
    for _, row in df_words.iterrows()
    if is_single_word(row['value']) and isinstance(row['translate_ru'], str)
]

@bot.message_handler(commands=['scramble'])
def scramble_task(message):
    user_id = message.from_user.id
    if not filtered_words:
        bot.send_message(message.chat.id, "–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–ª–æ–≤ –≤ –±–∞–∑–µ.")
        return
    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å–ª–æ–≤–∞–º –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –¥–æ –≤—ã—Ö–æ–¥–∞ –∏–ª–∏ –∫–æ–Ω—Ü–∞ –±–∞–∑—ã
    words_order = list(range(len(filtered_words)))
    random.shuffle(words_order)
    scramble_state[user_id] = {
        'indices': words_order,
        'current': 0,
        'correct': 0,
        'waiting_answer': False
    }
    send_next_scramble(message.chat.id, user_id)

def send_next_scramble(chat_id, user_id):
    state = scramble_state.get(user_id)
    if not state or state['current'] >= len(state['indices']):
        score = state['correct']
        bot.send_message(chat_id, f"–†–∞—É–Ω–¥ –æ–∫–æ–Ω—á–µ–Ω! –¢—ã —Å–æ–±—Ä–∞–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ {score} —Å–ª–æ–≤ –∏–∑ {len(state['indices'])}. –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é ‚Äî –∫–Ω–æ–ø–∫–∞ –Ω–∏–∂–µ.")
        scramble_state.pop(user_id, None)
        return

    idx = state['indices'][state['current']]
    word, translation = filtered_words[idx]
    letters = list(word)
    random.shuffle(letters)
    scrambled = " ".join(f"[{l}]" for l in letters)

    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add("–í –º–µ–Ω—é")
    bot.send_message(
        chat_id,
        f"–°–æ–±–µ—Ä–∏ —Å–ª–æ–≤–æ –ø–æ –ø–µ—Ä–µ–≤–æ–¥—É: ¬´{translation}¬ª\n–ë—É–∫–≤—ã –≤–ø–µ—Ä–µ–º–µ—à–∫—É: {scrambled}\n–í–≤–µ–¥–∏ —Å–ª–æ–≤–æ:",
        reply_markup=kb
    )
    state['answer'] = word
    state['waiting_answer'] = True

@bot.message_handler(func=lambda m: scramble_state.get(m.from_user.id, {}).get('waiting_answer', False))
def scramble_answer(message):
    user_id = message.from_user.id
    state = scramble_state.get(user_id)
    if not state:
        return
    if message.text.strip().lower() == "–≤ –º–µ–Ω—é":
        bot.send_message(message.chat.id, "–í—ã –≤—ã—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –†–∞—É–Ω–¥ –æ—Ç–º–µ–Ω—ë–Ω.")
        scramble_state.pop(user_id, None)
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add("üß†–ù–∞—á–∞—Ç—å —É—Ä–æ–∫", "üìò–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫")
        keyboard.add("‚úÖ–ù–∞—á–∞—Ç—å –∫–≤–∏–∑", "üéß–î–∏–∫—Ç–∞–Ω—Ç")
        keyboard.add("üî§ –°–æ–±–µ—Ä–∏ —Å–ª–æ–≤–æ", "üìä –†–µ–π—Ç–∏–Ω–≥", "‚öôÔ∏è–ü–æ–º–æ—â—å")
        bot.send_message(message.chat.id, "–ß–æ–ª”ß–º, —è –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∫–æ–º–∏ —è–∑—ã–∫–∞! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
        return
    else:
        user_norm = normalize_text(message.text)
        answer_norm = normalize_text(state['answer'])
        if user_norm == answer_norm:
            state['correct'] += 1
            add_score(user_id, 5)  # +5 –æ—á–∫–æ–≤ –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ –≤ scramble

            bot.send_message(message.chat.id, "–ë—É—Ä! –í—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ, —Ç—ã —Å–æ–±—Ä–∞–ª —Å–ª–æ–≤–æ –≤–µ—Ä–Ω–æ")
        else:
            bot.send_message(message.chat.id, f"–ù–µ—Ç, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {state['answer']}. –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ ”¶ –∏–ª–∏ —ñ –∏–∑ –ª–∞—Ç–∏–Ω—Å–∫–æ–π —Ä–∞—Å—Å–∫–ª–∞–¥–∫–∏, –∞ –Ω–µ –∏–∑ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–æ–π.")

    state['current'] += 1
    state['waiting_answer'] = False
    send_next_scramble(message.chat.id, user_id)

DICTANT_QUESTIONS = 37

def normalize_text(text):
    # –í—ã—Ä–µ–∑–∞–µ–º –≤—Å–µ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
    table = str.maketrans('', '', string.punctuation + '¬´¬ª‚Äî‚Ä¶‚Äì‚Äê‚Äë‚Äú‚Äù‚Äô‚Äò' + "!?.,:;‚Äì‚Äî()[]{}\"'")  # –Ω–∞ –≤—Å–µ —Å–ª—É—á–∞–∏ –∂–∏–∑–Ω–∏
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã, —É–±–∏—Ä–∞–µ–º —Ç–æ—á–∫–∏, –∑–∞–ø—è—Ç—ã–µ, –∫–∞–≤—ã—á–∫–∏, –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ lower
    clean = text.lower().translate(table).replace("—ë", "–µ")
    clean = " ".join(clean.split())  # –∑–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–¥–∏–Ω
    return clean.strip()

@bot.message_handler(func=lambda m: m.text == "üéß–î–∏–∫—Ç–∞–Ω—Ç")
def start_dictant(message):
    user_id = message.from_user.id
    register_user(message.chat.id)
    indices = random.sample(range(37), DICTANT_QUESTIONS)
    dictant_state[user_id] = {
        'indices': indices,
        'current': 0,
        'correct': 0,
        'waiting_answer': False
    }
    send_next_dictant(message.chat.id, user_id)

# –ö–Ω–æ–ø–∫–∞ —Ç–µ–ø–µ—Ä—å "–í –º–µ–Ω—é":
def send_next_dictant(chat_id, user_id):
    state = dictant_state.get(user_id)
    if not state or state['current'] >= DICTANT_QUESTIONS:
        score = state['correct']
        kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        kb.add("–í –º–µ–Ω—é")
        bot.send_message(chat_id, f"–î–∏–∫—Ç–∞–Ω—Ç –æ–∫–æ–Ω—á–µ–Ω! –¢—ã —É–≥–∞–¥–∞–ª {score} –∏–∑ {DICTANT_QUESTIONS}. –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é - –∫–Ω–æ–ø–∫–∞ –Ω–∏–∂–µ", reply_markup=kb)
        state['waiting_answer'] = True
        return

    idx = state['indices'][state['current']]
    m = re.search(r"['\"](.+?)['\"]", lessons[idx])
    correct_text = m.group(1) if m else ""
    state['answer'] = correct_text

    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add("–í –º–µ–Ω—é")
    bot.send_voice(chat_id, open(os.path.join(VOICE_LESSONS_PATH, f'lesson{idx+1}.ogg'), 'rb'),
                   caption=f"–î–∏–∫—Ç–∞–Ω—Ç {state['current']+1} –∏–∑ {DICTANT_QUESTIONS}.\n–í–≤–µ–¥–∏ —É—Å–ª—ã—à–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.",
                   reply_markup=kb)
    state['waiting_answer'] = True

@bot.message_handler(func=lambda m: dictant_state.get(m.from_user.id, {}).get('waiting_answer', False))
def dictant_answer(message):
    user_id = message.from_user.id
    state = dictant_state.get(user_id)
    if not state:
        return

    if message.text.strip().lower() == "–≤ –º–µ–Ω—é":
        bot.send_message(message.chat.id, "–í—ã –≤—ã—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –î–∏–∫—Ç–∞–Ω—Ç –æ—Ç–º–µ–Ω—ë–Ω.")
        dictant_state.pop(user_id, None)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é (—Ç–æ –∂–µ, —á—Ç–æ /start)
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add("üß†–ù–∞—á–∞—Ç—å —É—Ä–æ–∫", "üìò–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫")
        keyboard.add("‚úÖ–ù–∞—á–∞—Ç—å –∫–≤–∏–∑", "üéß–î–∏–∫—Ç–∞–Ω—Ç")
        keyboard.add("üî§ –°–æ–±–µ—Ä–∏ —Å–ª–æ–≤–æ", "üìä –†–µ–π—Ç–∏–Ω–≥", "‚öôÔ∏è–ü–æ–º–æ—â—å")
        bot.send_message(message.chat.id, "–ß–æ–ª”ß–º, —è –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∫–æ–º–∏ —è–∑—ã–∫–∞! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
        return
    else:
        user_norm = normalize_text(message.text)
        answer_norm = normalize_text(state['answer'])
        if user_norm == answer_norm:
            state['correct'] += 1
            add_score(user_id, 7)  # +7 –æ—á–∫–æ–≤ –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –¥–∏–∫—Ç–∞–Ω—Ç–µ
            bot.send_message(message.chat.id, "–ó—ç–≤ –±—É—Ä! –¢—ã –≤–µ—Ä–Ω–æ —É—Å–ª—ã—à–∞–ª –∏ –∑–∞–ø–∏—Å–∞–ª!")
        else:
            bot.send_message(message.chat.id, f"–ù–µ—Ç, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {state['answer']}\n–í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ ”¶ –∏–ª–∏ —ñ –∏–∑ –ª–∞—Ç–∏–Ω—Å–∫–æ–π —Ä–∞—Å—Å–∫–ª–∞–¥–∫–∏, –∞ –Ω–µ –∏–∑ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–æ–π.\n –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")

    state['current'] += 1
    state['waiting_answer'] = False
    send_next_dictant(message.chat.id, user_id)

# Handler for /start command
@bot.message_handler(commands=['start'])
def start(message):
    register_user(message.chat.id)
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üß†–ù–∞—á–∞—Ç—å —É—Ä–æ–∫", "üìò–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫")
    keyboard.add("‚úÖ–ù–∞—á–∞—Ç—å –∫–≤–∏–∑", "üéß–î–∏–∫—Ç–∞–Ω—Ç")
    keyboard.add("üî§ –°–æ–±–µ—Ä–∏ —Å–ª–æ–≤–æ", "üìä –†–µ–π—Ç–∏–Ω–≥", "‚öôÔ∏è–ü–æ–º–æ—â—å")

    bot.send_message(message.chat.id, "–ß–æ–ª”ß–º, —è –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∫–æ–º–∏ —è–∑—ã–∫–∞! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

# –ö–Ω–æ–ø–∫–∞ "–°–æ–±–µ—Ä–∏ —Å–ª–æ–≤–æ" –≤—ã–∑—ã–≤–∞–µ—Ç scramble-—Ä–µ–∂–∏–º
@bot.message_handler(func=lambda message: message.text == "üî§ –°–æ–±–µ—Ä–∏ —Å–ª–æ–≤–æ")
def menu_scramble(message):
    scramble_task(message)


def send_lesson_with_voice(chat_id, lesson_index):
    bot.send_message(chat_id, lessons[lesson_index])
    voice_file = f"lesson{lesson_index + 1}.ogg"
    voice_path = os.path.join(VOICE_LESSONS_PATH, voice_file)
    if os.path.exists(voice_path):
        try:
            with open(voice_path, 'rb') as audio:
                bot.send_voice(chat_id, audio, caption="üîä –ü—Ä–æ—Å–ª—É—à–∞–π—Ç–µ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ —Ñ—Ä–∞–∑—ã")
        except Exception as e:
            bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞.")
    else:
        bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –∞—É–¥–∏–æ –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")

@bot.message_handler(func=lambda message: message.text == "üß†–ù–∞—á–∞—Ç—å —É—Ä–æ–∫")
def start_lesson(message):
    register_user(message.chat.id)
    user_id = message.from_user.id
    # Reset the lesson index to 0 when starting lessons
    current_lesson_index[user_id] = 0
    lesson_index = current_lesson_index[user_id]
    if lesson_index < len(lessons):
        send_lesson_with_voice(message.chat.id, lesson_index)
    else:
        bot.send_message(message.chat.id, "–í—Å–µ —É—Ä–æ–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! –ñ–¥–∏—Ç–µ –Ω–æ–≤—ã—Ö.")

@bot.message_handler(func=lambda message: message.text == "üìò–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫")
def next_lesson(message):
    register_user(message.chat.id)
    user_id = message.from_user.id
    if user_id not in current_lesson_index:
        current_lesson_index[user_id] = 0
    current_lesson_index[user_id] += 1
    lesson_index = current_lesson_index[user_id]
    if lesson_index < len(lessons):
        send_lesson_with_voice(message.chat.id, lesson_index)
    else:
        bot.send_message(message.chat.id, "–í—Å–µ —É—Ä–æ–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! –ñ–¥–∏—Ç–µ –Ω–æ–≤—ã—Ö. ")

# Quiz functions
@bot.message_handler(func=lambda message: message.text == "‚úÖ–ù–∞—á–∞—Ç—å –∫–≤–∏–∑")
def start_quiz(message):
    register_user(message.chat.id)
    user_id = message.from_user.id
    current_quiz_index[user_id] = 0
    question_data = quiz_questions[0]
    send_quiz(message.chat.id, question_data, user_id)

def send_quiz(chat_id, question_data, user_id):
    msg = bot.send_poll(
        chat_id=chat_id,
        question=question_data["question"],
        options=question_data["options"],
        is_anonymous=False,
        type='quiz',
        correct_option_id=question_data["correct_option_id"],
        open_period=60
    )
    active_quizzes[msg.poll.id] = (user_id, chat_id, current_quiz_index[user_id])

@bot.poll_answer_handler()
def handle_poll_answer(poll_answer):
    poll_id = poll_answer.poll_id
    user_id = poll_answer.user.id
    if poll_id not in active_quizzes:
        return
    stored_user_id, chat_id, question_index = active_quizzes[poll_id]
    if stored_user_id != user_id:
        return
    question_data = quiz_questions[question_index]
    if poll_answer.option_ids and poll_answer.option_ids[0] == question_data["correct_option_id"]:
        add_score(user_id, 4)  # +4 –æ—á–∫–∞ –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –∫–≤–∏–∑–µ
        del active_quizzes[poll_id]
    else:
        explanation = question_data.get("explanation", "–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç.")
        bot.send_message(chat_id=chat_id, text=explanation)
        del active_quizzes[poll_id]
    current_quiz_index[user_id] = question_index + 1
    if current_quiz_index[user_id] < len(quiz_questions):
        next_question_data = quiz_questions[current_quiz_index[user_id]]
        msg = bot.send_poll(
            chat_id=chat_id,
            question=next_question_data["question"],
            options=next_question_data["options"],
            is_anonymous=False,
            type='quiz',
            correct_option_id=next_question_data["correct_option_id"],
            open_period=60
        )
        active_quizzes[msg.poll.id] = (user_id, chat_id, current_quiz_index[user_id])
    else:
        bot.send_message(chat_id=chat_id, text="–ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!")
        del current_quiz_index[user_id]

@bot.message_handler(func=lambda message: message.text == "‚öôÔ∏è–ü–æ–º–æ—â—å")
def help_command(message):
    register_user(message.chat.id)
    help_text = """
ü§ñ –≠—Ç–æ –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∫–æ–º–∏ —è–∑—ã–∫–∞. –í–æ—Ç —á—Ç–æ —É–º–µ—é—Ç –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é:\n\n\nüß† –ù–∞—á–∞—Ç—å —É—Ä–æ–∫ - –Ω–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ —Å –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–∫–∞\n\nüìò –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫ - –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É\n\n‚úÖ –ù–∞—á–∞—Ç—å –∫–≤–∏–∑ - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ç–µ—Å—Ç–∞\n\nüéß –î–∏–∫—Ç–∞–Ω—Ç - –ø—Ä–æ—Å–ª—É—à–∞—Ç—å –∞—É–¥–∏–æ –∏ –Ω–∞–ø–∏—Å–∞—Ç—å —É—Å–ª—ã—à–∞–Ω–Ω—É—é —Ñ—Ä–∞–∑—É\n\nüî§ –°–æ–±–µ—Ä–∏ —Å–ª–æ–≤–æ - –∏–≥—Ä–∞ –Ω–∞ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã—Ö –±—É–∫–≤\n\n‚öôÔ∏è –ü–æ–º–æ—â—å - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n\n–ö–∞–∂–¥—ã–π —É—Ä–æ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—Ä–∞–∑—É –Ω–∞ –∫–æ–º–∏ —è–∑—ã–∫–µ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º –∏ –∞—É–¥–∏–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ–º.\n–£—á–∏—Ç–µ—Å—å, –ø—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ—Å—å –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å–æ–º! üòä
    """
    bot.send_message(message.chat.id, help_text)

def send_random_lesson(chat_id):
    lesson_index = random.randint(0, len(lessons) - 1)
    bot.send_message(chat_id, lessons[lesson_index])
    voice_file = f"lesson{lesson_index + 1}.ogg"
    voice_path = os.path.join(VOICE_LESSONS_PATH, voice_file)
    if os.path.exists(voice_path):
        try:
            with open(voice_path, 'rb') as audio:
                bot.send_voice(chat_id, audio, caption="üîä –ü—Ä–æ—Å–ª—É—à–∞–π—Ç–µ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ —Ñ—Ä–∞–∑—ã")
        except Exception as e:
            bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞.")
    else:
        bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –∞—É–¥–∏–æ –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")

def send_daily_lesson():
    for chat_id in subscribed_users:
        try:
            send_random_lesson(chat_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É—Ä–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")

msk_time = dtime(hour=22, minute=20, tzinfo=ZoneInfo("Europe/Moscow"))
scheduler.add_job(send_daily_lesson, 'cron', hour=msk_time.hour, minute=msk_time.minute, timezone=msk_time.tzinfo)
scheduler.start()

@bot.inline_handler(lambda query: True)
def query_text(inline_query):
    try:
        lesson_index = random.randint(0, len(lessons) - 1)
        lesson_text = lessons[lesson_index]
        voice_file = f"lesson{lesson_index + 1}.ogg"
        voice_path = os.path.join(VOICE_LESSONS_PATH, voice_file)
        if os.path.exists(voice_path):
            with open(voice_path, 'rb') as audio:
                voice_content = InputTextMessageContent(message_text=lesson_text)
                r = types.InlineQueryResultArticle(
                    id='1',
                    title="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É—Ä–æ–∫ —Å –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º",
                    input_message_content=voice_content
                )
                bot.answer_inline_query(inline_query.id, [r], cache_time=1)
        else:
            r = types.InlineQueryResultArticle(
                id='1', title="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É—Ä–æ–∫",
                input_message_content=types.InputTextMessageContent(message_text=lesson_text)
            )
            bot.answer_inline_query(inline_query.id, [r], cache_time=1)
    except Exception as e:
        print(f"Error handling inline query: {e}")

if __name__ == "__main__":
    bot.polling(none_stop=True)
